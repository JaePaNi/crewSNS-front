{"version":3,"sources":["store/thunk/thunkUser.js","component/login.js","component/notLogin.js","component/main.js","store/storeUser.js","component/signUp.js","store/storePost.js","component/postAdd.js","App.js","store/index.js","store/configure.js","index.js","store/thunk/thunkPost.js"],"names":["axios","defaults","baseURL","process","fetchRegist","createAsyncThunk","userInsertInfo","a","post","payload","fetchLogin","withCredentials","fetchLoadUser","get","fetchLogout","Title","Typography","Login","dispatch","useDispatch","useSelector","state","storeUser","userNickname","userId","onClickLogout","useCallback","Wrap","size","hoverable","span","style","textAlign","level","ColButton","to","type","block","danger","onClick","memo","styled","div","Col","LoginForm","onloadFocus","useRef","loading","error","onInputSuccess","e","useEffect","alert","current","focus","onFinish","wrapperCol","md","xs","Item","name","rules","required","message","placeholder","ref","LoginButton","htmlType","Button","PostList","React","lazy","Main","isLogin","justify","fallback","userSlice","createSlice","initialState","regist","reducers","registReset","extraReducers","pending","fulfilled","rejected","action","data","user_id","user_nickname","actions","SignUp","useState","pw","pwCheck","inputData","setInputData","history","useHistory","insertPassword","target","value","passwordCheck","push","Password","onChange","PwCheck","undefined","postSlice","createPost","callPost","Post","PostImages","PostReply","images","removeImage","filter","i","v","postStatus","resetPost","fetchImages","concat","fetchCreatePost","console","log","fetchPost","content","image","reply","fetchReply","PostAdd","clickImage","storePost","onChangeImage","formData","FormData","files","length","append","onClickImageUpload","click","title","onClickRemoveImage","index","margin","fontSize","encType","TextArea","autoSize","minRows","multiple","hidden","icon","UploadOutlined","display","map","src","width","height","App","ColHeader","exact","path","rootReducer","combineReducers","store","configureStore","reducer","dotenv","config","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","arg","then","res"],"mappings":"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","file":"static/js/main.42ed5f58.chunk.js","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_URL_AWS_EC2;\r\n\r\n// 회원가입\r\nexport const fetchRegist = createAsyncThunk(\r\n    'user/fetchRegist',\r\n    async (userInsertInfo) => {\r\n        const payload = await axios.post('/user', userInsertInfo);\r\n        return payload;\r\n    }\r\n);\r\n\r\n// 로그인\r\nexport const fetchLogin = createAsyncThunk(\r\n    'user/fetchLogin',\r\n    async (userInsertInfo) => {\r\n        const payload = await axios.post('/user/login', userInsertInfo, {\r\n            withCredentials: true,\r\n        });\r\n        return payload;\r\n    }\r\n);\r\n\r\n// 로그인 후 쿠키정보로 사용자 정보 가져오기\r\nexport const fetchLoadUser = createAsyncThunk(\r\n    'user/fetchLoadUser',\r\n    async () => {\r\n        const payload = await axios.get('/user', {\r\n            withCredentials: true,\r\n        });\r\n        return payload;\r\n    }\r\n);\r\n\r\n// 로그아웃\r\nexport const fetchLogout = createAsyncThunk(\r\n    'user/fetchLogout',\r\n    async () => {\r\n        const payload = await axios.post('/user/logout', {}, {\r\n            withCredentials: true,\r\n        });\r\n        return payload;\r\n    }\r\n);","import { memo, useCallback } from 'react';\r\nimport { Card, Typography, Row, Col, Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchLogout } from '../store/thunk/thunkUser';\r\nimport styled from 'styled-components';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n    const { userNickname, userId } = useSelector(state => state.storeUser);\r\n    const onClickLogout = useCallback(() => {\r\n        dispatch(fetchLogout());\r\n    }, []);\r\n\r\n    return (\r\n        <Wrap>\r\n            <Card size=\"small\" hoverable>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'center' }}>\r\n                        <Title level={4}>{userNickname === '#' ? userId : userNickname}님</Title></Col>\r\n                    <ColButton span={24}>\r\n                        <Link to='/addpost'>\r\n                            <Button type='ghost' block>포스트 작성</Button>\r\n                        </Link>\r\n                    </ColButton>\r\n                    <ColButton span={24}><Button danger block onClick={onClickLogout}>로그아웃</Button></ColButton>\r\n                </Row>\r\n            </Card>\r\n        </Wrap>\r\n    );\r\n}\r\n\r\nexport default memo(Login);\r\n\r\nconst Wrap = styled.div`\r\n  position: sticky;\r\n  top: 15px;\r\n`;\r\n\r\nconst ColButton = styled(Col)`\r\n    margin: 5px 0;\r\n`;","import React, { useEffect, useCallback, useRef, memo } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchLogin } from '../store/thunk/thunkUser';\r\n\r\nconst LoginForm = () => {\r\n    const onloadFocus = useRef();\r\n\r\n    const dispatch = useDispatch();\r\n    const { loading, error } = useSelector(state => state.storeUser);\r\n\r\n    // 사용자가 로그인을 위한 id, pw를 입력 후 로그인 버튼을 누르면 fetchLogin을 dispatch하여 백엔드로 로그인을 위한 데이터를 보낸다.\r\n    const onInputSuccess = useCallback(e => {\r\n        dispatch(fetchLogin({ ...e }));\r\n    }, []);\r\n\r\n    // 입력한 id, pw로 로그인에 성공하지 못했으면 id, pw중 한가지가 오류가 난 것이므로 error가 true가 된다. 그러면 alert이벤트를 발생시킨다.\r\n    useEffect(() => {\r\n        error && alert('아이디 또는 비밀번호가 틀렸습니다.');\r\n    }, [error]);\r\n\r\n    //화면이 로딩되면 로그인 아이디에 자동 포커싱\r\n    useEffect(() => {\r\n        onloadFocus.current.focus();\r\n    }, []);\r\n\r\n    return (\r\n        <Wrap>\r\n            <Form size='middle' onFinish={onInputSuccess} wrapperCol={{ md: 18, xs: 12 }}>\r\n                <Form.Item name=\"id\" rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '계정 입력'\r\n                    }\r\n                ]}>\r\n                    <Input placeholder=\"아이디\" ref={onloadFocus} />\r\n                </Form.Item>\r\n                <Form.Item name=\"pw\" rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '비밀번호 입력'\r\n                    }\r\n                ]}>\r\n                    <Input type=\"password\" placeholder=\"비밀번호\" />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {/* loading이 true이면 loading 애니메이션이 동작한다. */}\r\n                    <LoginButton type=\"primary\" htmlType=\"submit\" loading={loading && true}>로그인</LoginButton>\r\n                    <Button type=\"ghost\"><Link to='/signup'>회원가입</Link></Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Wrap>\r\n    );\r\n}\r\n\r\nexport default memo(LoginForm);\r\n\r\n\r\nconst LoginButton = styled(Button)`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Wrap = styled.div`\r\n  position: sticky;\r\n  top: 15px;\r\n`;","import React, { Suspense, useEffect } from 'react';\r\n\r\nimport { Row, Col } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchPost } from '../store/thunk/thunkPost';\r\n\r\nimport Login from './login';\r\nimport NotLogin from './notLogin';\r\nconst PostList = React.lazy(() => import('./postList'));\r\n\r\nconst Main = () => {\r\n\r\n    // 로그인 여부를 확인한다. true or false\r\n    const { isLogin } = useSelector(state => state.storeUser);\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={2} />\r\n            <Col md={22} xs={22}>\r\n                <Row justify='space-around'>\r\n                    {/* isLogin이 true, false에 따라서 로그인 창 or 유저창이 보여진다. */}\r\n                    <Col md={6} xs={24}>{isLogin === true ? <Login /> : <NotLogin />}</Col>\r\n                    <Col md={1} />\r\n                    <Col md={17} xs={24}>\r\n                        <Suspense fallback={<div>loading...</div>}>\r\n                            <PostList />\r\n                        </Suspense>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Main;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { fetchLogin, fetchLogout, fetchLoadUser, fetchRegist } from './thunk/thunkUser';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    error: false,\r\n    isLogin: false,\r\n    userId: null,\r\n    userNickname: null,\r\n    regist: false, //회원가입 성공 여부\r\n};\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    reducers: {\r\n        //회원가입 성공 후 회원가입 regist값을 true에서 false로 변경해준다.\r\n        registReset: state => {\r\n            state.regist = false;\r\n            state.loading = false;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        // 회원가입 처리\r\n        [fetchRegist.pending]: (state) => {\r\n            state.loading = true;\r\n            state.error = false;\r\n        },\r\n        [fetchRegist.fulfilled]: (state) => {\r\n            state.regist = true;\r\n        },\r\n        [fetchRegist.rejected]: (state) => {\r\n            state.loading = false;\r\n            state.error = true;\r\n        },\r\n\r\n        // 로그인 처리\r\n        [fetchLogin.pending]: (state) => {\r\n            state.loading = true;\r\n            state.error = false;\r\n        },\r\n        [fetchLogin.fulfilled]: (state, action) => {\r\n            state.isLogin = true;\r\n            state.userId = action.payload.data.user_id;\r\n            state.userNickname = action.payload.data.user_nickname;\r\n        },\r\n        [fetchLogin.rejected]: (state) => {\r\n            state.loading = false;\r\n            state.error = true;\r\n        },\r\n\r\n        // 로그인 후 쿠키로 사용자 정보 받아오기\r\n        [fetchLoadUser.pending]: (state) => {\r\n            state.loading = true;\r\n        },\r\n        [fetchLoadUser.fulfilled]: (state, action) => {\r\n            state.isLogin = true;\r\n            state.userId = action.payload.data.user_id;\r\n            state.userNickname = action.payload.data.user_nickname;\r\n        },\r\n        [fetchLoadUser.rejected]: (state) => {\r\n            state.loading = false;\r\n        },\r\n\r\n        // 로그아웃 처리\r\n        [fetchLogout.pending]: (state) => {\r\n            state.loading = true;\r\n        },\r\n        [fetchLogout.fulfilled]: (state) => {\r\n            state.isLogin = false;\r\n            state.userId = null;\r\n            state.userNickname = null;\r\n            state.loading = false;\r\n            state.error = false;\r\n            state.regist = false;\r\n        },\r\n        [fetchLogout.rejected]: (state) => {\r\n            state.loading = false;\r\n        },\r\n    }\r\n});\r\n\r\nexport const { registReset } = userSlice.actions;\r\nexport default userSlice.reducer;","import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { Form, Input, Button, Row, Col } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { registReset } from '../store/storeUser';\r\nimport { fetchRegist } from '../store/thunk/thunkUser';\r\n\r\nconst SignUp = () => {\r\n    const [inputData, setInputData] = useState({ pw: null, pwCheck: false });\r\n    const onloadFocus = useRef();\r\n    const dispatch = useDispatch();\r\n    const { loading, regist, error } = useSelector(state => state.storeUser);\r\n    const history = useHistory();\r\n\r\n    //사용할 아이디 비밀번호 전부 입력 후 회원가입 버튼 누르면 createAsyncThunk를 통해 백엔드에 회원가입 요청을 보낸다.\r\n    //inputData.pwCheck :: 사용자가 입력한 두개의 비밀번호가 일치한지 확인한다.\r\n    const onInputSuccess = useCallback(e => {\r\n        if (inputData.pwCheck) dispatch(fetchRegist(e));\r\n    }, [inputData]);\r\n\r\n    //비밀번호를 서로 비교사기 위해서 useState inputData에 저장한다.\r\n    const insertPassword = useCallback(e => {\r\n        setInputData({ ...inputData, pw: e.target.value })\r\n    }, [inputData]);\r\n\r\n    //사용자가 입력한 비밀번호와 비밀번호 확인이 서로 같은지 확인한다.\r\n    const passwordCheck = useCallback(e => {\r\n        inputData.pw === e.target.value\r\n            ? setInputData({ ...inputData, pwCheck: true })\r\n            : setInputData({ ...inputData, pwCheck: false })\r\n    }, [inputData]);\r\n\r\n    //회원가입 버튼을 누르고 백엔드에서 응답이 오면 성공/실패 여부를 판단한다.\r\n    //useSelect로 regist, loading, error를 가지고 판단한다.\r\n    //loading과 regist모두 true이면 회원가입 성공, loading이 false이고 error가 true이면 회원가입 실패이다.\r\n    //회원가입은 아이디로만 중복확인한다.\r\n    useEffect(() => {\r\n        if (loading) {\r\n            if (regist) {\r\n                alert('회원가입 성공');\r\n                dispatch(registReset()); //회원가입 성공 후 storeUser의 regist값을 true에서 false로 변경해준다.\r\n                history.push('/');\r\n            }\r\n        }\r\n        if (loading === false && error) alert('중복되는 아이디 입니다.');\r\n    }, [regist, loading, error]);\r\n\r\n    //화면이 로딩되면 사용할 아이디 부분에 focus효과\r\n    useEffect(() => onloadFocus.current.focus(), []);\r\n\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={6} xs={22}>\r\n                <Form size='middle' onFinish={onInputSuccess} wrapperCol={{ md: 24, xs: 12 }}>\r\n                    <Form.Item name=\"id\" rules={[\r\n                        {\r\n                            required: true,\r\n                            message: '사용할 계정 입력해주세요'\r\n                        }\r\n                    ]}>\r\n                        <Input placeholder=\"사용할 아이디\" ref={onloadFocus} />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"pw\" rules={[\r\n                        {\r\n                            required: true,\r\n                            message: '사용할 비밀번호 입력해주세요'\r\n                        }\r\n                    ]}>\r\n                        <Input.Password placeholder=\"사용할 비밀번호\" onChange={insertPassword} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"pwCheck\">\r\n                        <Input.Password placeholder=\"비밀번호 확인\" onChange={passwordCheck} />\r\n                        {inputData.pwCheck === false ? <PwCheck>비밀번호가 다릅니다.</PwCheck> : undefined}\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <LoginButton type=\"primary\" htmlType=\"submit\" loading={loading && true} block>회원가입</LoginButton>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default SignUp;\r\n\r\n\r\nconst LoginButton = styled(Button)`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst PwCheck = styled.div`\r\n  font-weight: bold;\r\n  color: red;\r\n`;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCreatePost, fetchImages, fetchPost, fetchReply } from './thunk/thunkPost';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    error: false,\r\n    createPost: false,\r\n    callPost: false,\r\n    Post: [],\r\n    PostImages: [],\r\n    PostReply: [],\r\n    images: [],\r\n};\r\n\r\nconst postSlice = createSlice({\r\n    name: 'post',\r\n    initialState,\r\n    reducers: {\r\n        removeImage: ((state, action) => {\r\n            state.images = state.images.filter((i, v) => v !== action.payload);\r\n        }),\r\n\r\n        postStatus: ((state) => {\r\n            state.images = [];\r\n            state.createPost = false;\r\n        }),\r\n\r\n        resetPost: ((state) => {\r\n            state.Post = [];\r\n        }),\r\n    },\r\n    extraReducers: {\r\n        // 이미지 업로드\r\n        [fetchImages.pending]: (state, action) => {\r\n        },\r\n        [fetchImages.fulfilled]: (state, action) => {\r\n            state.images = state.images.concat(action.payload.data);\r\n        },\r\n        [fetchImages.rejected]: (state, action) => {\r\n        },\r\n\r\n        // post생성하기\r\n        [fetchCreatePost.pending]: (state, action) => {\r\n            console.log('createPost pending');\r\n        },\r\n        [fetchCreatePost.fulfilled]: (state, action) => {\r\n            console.log('createPost fulfilled');\r\n            state.createPost = true;\r\n        },\r\n        [fetchCreatePost.rejected]: (state, action) => {\r\n            console.log('createPost rejected');\r\n        },\r\n\r\n        // post불러오기\r\n        [fetchPost.pending]: (state, action) => {\r\n            state.loading = true;\r\n            state.error = false;\r\n        },\r\n        [fetchPost.fulfilled]: (state, action) => {\r\n            state.callPost = true;\r\n            \r\n            state.Post = state.Post.concat(...action.payload.content);\r\n            state.PostImages = state.PostImages.concat(...action.payload.image);\r\n            state.PostReply = state.PostReply.concat(...action.payload.reply);\r\n        },\r\n        [fetchPost.rejected]: (state, action) => {\r\n            state.error = true;\r\n            state.loading = false;\r\n            state.callPost = false;\r\n        },\r\n\r\n        // 댓글 등록하기\r\n        [fetchReply.pending]: (state, action) => {\r\n        },\r\n        [fetchReply.fulfilled]: (state, action) => {\r\n            console.log('fetchReply fulfilled', action.payload);\r\n            state.PostReply.push({\r\n                ...state.PostReply,\r\n                ...action.payload.data\r\n            });\r\n        },\r\n        [fetchReply.rejected]: (state, action) => {\r\n        }\r\n    }\r\n});\r\n\r\nexport const { removeImage, postStatus, resetPost } = postSlice.actions;\r\nexport default postSlice.reducer;","import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Row, Col, Form, Input, Button, Typography, Upload } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchImages, fetchCreatePost } from '../store/thunk/thunkPost';\r\nimport { removeImage, postStatus, resetPost } from '../store/storePost';\r\n\r\nconst PostAdd = () => {\r\n    const clickImage = useRef();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { isLogin, userId } = useSelector(state => state.storeUser);\r\n    const { images, createPost } = useSelector(state => state.storePost);\r\n\r\n    const onChangeImage = useCallback(e => {\r\n        const formData = new FormData();\r\n        for (let i = 0; i < e.target.files.length; i++) {\r\n            formData.append('image', e.target.files[i], e.target.files[i].name);\r\n        }\r\n        dispatch(fetchImages(formData));\r\n    }, []);\r\n\r\n    const onClickImageUpload = useCallback(() => {\r\n        clickImage.current.click();\r\n    }, [clickImage.current]);\r\n\r\n    const onFinish = useCallback(e => {\r\n        const formData = new FormData();\r\n        for (let i = 0; i < images.length; i++) {\r\n            console.log('image value :: ', images[i]);\r\n            formData.append('images', images[i]);\r\n        }\r\n        formData.append('title', e.title);\r\n        formData.append('content', e.content);\r\n        formData.append('user', userId);\r\n        dispatch(fetchCreatePost(formData));\r\n    }, [images]);\r\n\r\n    const onClickRemoveImage = useCallback(index => () => {\r\n        dispatch(removeImage(index));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (createPost) {\r\n            dispatch(postStatus());\r\n            dispatch(resetPost());\r\n            alert('포스트가 등록되었습니다.');\r\n            history.push('/');\r\n        }\r\n    }, [createPost]);\r\n\r\n    useEffect(() => {\r\n        !isLogin && history.push('/');\r\n    }, []);\r\n\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={22} xs={22} style={{ textAlign: 'center', margin: '50px 0', fontSize: 20 }}>\r\n                <Typography.Title level={3}>포스트 작성</Typography.Title>\r\n            </Col>\r\n            <Col md={10} xs={22}>\r\n                <Form onFinish={onFinish} encType='multipart/form-data'>\r\n                    <Form.Item name='title'>\r\n                        <Input placeholder=\"포스트의 제목은 무엇인가요?\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name='content'>\r\n                        <Input.TextArea placeholder=\"어떤 내용을 작성하시겠어요?\" autoSize={{ minRows: 7 }} />\r\n                    </Form.Item>\r\n\r\n                    <input ref={clickImage} type='file' multiple hidden onChange={onChangeImage} encType='multipart/form-data' />\r\n                    <Button block onClick={onClickImageUpload} icon={<UploadOutlined />}>이미지를 업로드 하시겠어요?</Button>\r\n\r\n                    <Form.Item>\r\n                        <div style={{ display: 'flex' }}>\r\n                            {images.length !== 0 && images.map((e, index) => (\r\n                                <div>\r\n                                    <img src={e} width='100px' height='auto' />\r\n                                    <div>\r\n                                        <Button onClick={onClickRemoveImage(index)}>지우기</Button>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button block type=\"primary\" htmlType=\"submit\">포스트 업로드</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default PostAdd;","import React, { useEffect } from 'react';\r\nimport { Row, Col, Typography } from 'antd';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchLoadUser } from './store/thunk/thunkUser';\r\nimport styled from 'styled-components';\r\n\r\nimport Main from './component/main';\r\nimport SignUp from './component/signUp';\r\nimport AddPost from './component/postAdd';\r\n\r\nfunction App() {\r\n    const { isLogin } = useSelector(state => state.storeUser);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        !isLogin && dispatch(fetchLoadUser());\r\n    }, []);\r\n    \r\n    return (\r\n        <Row>\r\n            <ColHeader span={24}>\r\n                <Typography.Title level={3}>CREW STAGRAM</Typography.Title>\r\n            </ColHeader>\r\n            <Col span={24}>\r\n                <BrowserRouter>\r\n                    <Route exact path='/'><Main /></Route>\r\n                    <Route exact path='/signup'><SignUp /></Route>\r\n                    <Route exact path='/addpost'><AddPost /></Route>\r\n                </BrowserRouter>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\nconst ColHeader = styled(Col)`\r\n  padding: 15px 0;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n  color: black;\r\n`;","import { combineReducers } from 'redux';\r\nimport storeUser from './storeUser';\r\nimport storePost from './storePost';\r\n\r\nexport const rootReducer = combineReducers({\r\n    storeUser: storeUser,\r\n    storePost: storePost,\r\n});","import { configureStore } from '@reduxjs/toolkit';\r\nimport { rootReducer } from './index';\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n});\r\n\r\nexport default store;","import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/configure';\r\n\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  body {\r\n    background-color: #fff3e0;\r\n  }\r\n`\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    <GlobalStyle />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_URL_AWS_EC2;\r\n\r\n// 포스트생성\r\nexport const fetchCreatePost = createAsyncThunk(\r\n    'post/fetchCreatePost',\r\n    async (formData) => {\r\n        const payload = await axios.post('/post/postCreate', formData);\r\n        return payload;\r\n    }\r\n);\r\n\r\n// 이미지 우선 등록\r\nexport const fetchImages = createAsyncThunk(\r\n    'post/fetchImages',\r\n    async (formData) => {\r\n        const payload = await axios.post('/post/postImages', formData);\r\n        return payload;\r\n    }\r\n);\r\n\r\n// 포스트 불러오기\r\nexport const fetchPost = createAsyncThunk(\r\n    'post/fetchPost',\r\n    async (arg) => {\r\n        const payload = await axios.get(`/post/postCall?skip=${arg}&take=${4}`).then(res => res.data);\r\n        return payload;\r\n    }\r\n);\r\n\r\n// 댓글 등록하기\r\nexport const fetchReply = createAsyncThunk(\r\n    'post/fetchReply',\r\n    async (data) => {\r\n        const { index } = data;\r\n        const payload = await axios.post(`/post/${index}/postReply`, data);\r\n        return payload;\r\n    }\r\n);"],"sourceRoot":""}