{"version":3,"sources":["component/coverImage.js","component/desc.js","component/postList.js"],"names":["CoverImage","post","useSelector","state","storePost","PostImages","callPost","offset","scroll","placeholder","height","throttle","map","img","index","PreviewGroup","src","post_id","image_author","image_link","Paragraph","Typography","paragraphData","rows","expandable","symbol","Desc","PostReply","storeUser","isLogin","userId","dispatch","useDispatch","useState","replyContent","setReplyContent","onChangeReply","useCallback","e","target","value","onClickReply","fetchReply","span","ellipsis","post_content","reply","reply_post_author","author","reply_user_author","content","reply_content","datetime","title","reply_createdate","Fragment","md","xs","onChange","bordered","onPressEnter","onClick","type","Meta","Card","Title","Cards","Post","skip","setSkip","onscroll","document","documentElement","scrollTop","scrollHeight","clientHeight","console","log","fetchPost","useEffect","window","addEventListener","removeEventListener","hoverable","style","maxWidth","align","post_author","cover","level","post_title","description","styled"],"mappings":"kOAmBeA,EAdI,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACIC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAApDC,EADqB,EACrBA,WACR,OAF6B,EACTC,UAGhB,cAAC,IAAD,CAAUC,OAAQ,IAAKC,OAAO,OAAOC,YAAa,6CAAuBC,OAAO,QAAQC,SAAU,IAAlG,SACKN,EAAWO,KAAI,SAACC,EAAKC,GAAN,OACZ,cAAC,IAAMC,aAAP,UACI,cAAC,IAAD,CAAOC,IAAKf,EAAKgB,UAAYJ,EAAIK,cAAgBL,EAAIM,cADhCL,S,mCCLjCM,EAAcC,IAAdD,UACFE,EAAgB,CAAEC,KAAM,EAAGC,YAAY,EAAMC,OAAQ,yCAkD5CC,EAhDF,SAAC,GAAc,IAAZzB,EAAW,EAAXA,KACJ0B,EAAczB,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAAzCuB,UADe,EAEKzB,aAAY,SAAAC,GAAK,OAAIA,EAAMyB,aAA/CC,EAFe,EAEfA,QAASC,EAFM,EAENA,OACXC,EAAWC,cAHM,EAKiBC,mBAAS,IAL1B,mBAKhBC,EALgB,KAKFC,EALE,KAOjBC,EAAgBC,uBAAY,SAAAC,GAC9BH,EAAgBG,EAAEC,OAAOC,SAC1B,IAEGC,EAAeJ,uBAAY,SAAAvB,GAAK,OAAI,WACrB,KAAjBoB,GAAuBH,EAASW,YAAW,CAAER,eAAcJ,SAAQhB,WACnEqB,EAAgB,OACjB,CAACD,EAAcL,IAClB,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAKc,KAAM,GAAX,SACI,cAACvB,EAAD,CACIwB,SAAUtB,EADd,SAEKrB,EAAK4C,iBAKVlB,EAAUf,KAAI,SAACkC,EAAOhC,GAAR,OACVgC,EAAMC,oBAAsB9C,EAAKgB,SACjC,cAAC,IAAD,CAAK0B,KAAM,GAAX,SACI,cAAC,IAAD,CACIK,OAAQ,+BAAOF,EAAMG,oBACrBC,QAAS,4BAAIJ,EAAMK,gBACnBC,SAAU,cAAC,IAAD,CAASC,MAAOP,EAAMQ,iBAAtB,SAAwC,+BAAOR,EAAMQ,wBAJnDxC,MASxBe,GACA,eAAC,IAAM0B,SAAP,WACI,cAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAjB,SACI,cAAC,IAAD,CAAOC,SAAUtB,EAAeI,MAAON,EAAczB,YAAY,kBAAQkD,UAAU,EAAOC,aAAcnB,EAAaxC,EAAKgB,aAE9H,cAAC,IAAD,CAAKuC,GAAI,EAAGC,GAAI,EAAhB,SAAmB,cAAC,IAAD,CAAQI,QAASpB,EAAaxC,EAAKgB,SAAU6C,KAAK,OAAlD,mC,8FC1C/BC,EAASC,IAATD,KACAE,EAAU5C,IAAV4C,MA2DFC,GAFSC,UAvDF,WACT,IAAMpC,EAAWC,cADF,EAEY9B,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAA9C+D,EAFO,EAEPA,KAAM7D,EAFC,EAEDA,SAFC,EAGS2B,mBAAS,GAHlB,mBAGRmC,EAHQ,KAGFC,EAHE,KAKTC,EAAW,WAAO,IAAD,EAC+BC,SAASC,gBAAnDC,EADW,EACXA,UAAWC,EADA,EACAA,aAAcC,EADd,EACcA,aAC5BF,EAAYE,EAAgBD,EAAe,IAC5CE,QAAQC,IAAR,uBAA4BJ,EAA5B,4BAAyDC,EAAzD,4BAAyFC,IACzFN,EAAQD,EAAO,GACfrC,EAAS+C,YAAUV,MAgB3B,OAZAW,qBAAU,WAEN,OADAC,OAAOC,iBAAiB,SAAUX,GAC3B,WACHU,OAAOE,oBAAoB,SAAUZ,MAE1C,CAACA,IAEJS,qBAAU,WACNhD,EAAS+C,YAAUV,IACnBC,EAAQD,EAAO,KAChB,IAGC9D,GACA,cAAC,IAAD,UACI,cAAC,IAAD,CAAKkD,GAAI,GAAIC,GAAI,GAAjB,SAEQU,EAAKvD,KAAI,SAAC0B,EAAGxB,GAAJ,OACL,cAACoD,EAAD,CAEIiB,WAAS,EACTC,MAAO,CAAEC,SAAU,QACnBhC,MACI,cAAC,IAAD,CAAKiC,MAAM,SAAX,SAEI,cAAC,IAAD,CAAK9B,GAAI,GAAIC,GAAI,GAAjB,SAAsBnB,EAAEiD,gBAGhCC,MAAO,cAAC,EAAD,CAAwBvF,KAAMqC,GAAbxB,GAV5B,SAYI,cAACiD,EAAD,CACIV,MAAO,cAACY,EAAD,CAAOwB,MAAO,EAAd,SAAkBnD,EAAEoD,aAC3BC,YAAa,cAAC,EAAD,CAAM1F,KAAMqC,OAbxBxB,WAwBnB8E,YAAO5B,IAAP4B,CAAH","file":"static/js/4.0f3eb7e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Image } from 'antd';\r\nimport LazyLoad from 'react-lazyload';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst CoverImage = ({ post }) => {\r\n    const { PostImages, callPost } = useSelector(state => state.storePost);\r\n    return (\r\n        callPost &&\r\n        <LazyLoad offset={100} scroll=\"true\" placeholder={<div>loading...</div>} height=\"200px\" throttle={100}>\r\n            {PostImages.map((img, index) => (\r\n                <Image.PreviewGroup key={index}>\r\n                    <Image src={post.post_id === img.image_author && img.image_link} />\r\n                </Image.PreviewGroup>\r\n            ))}\r\n        </LazyLoad>\r\n    );\r\n}\r\n\r\nexport default CoverImage;","import React, { useState, useCallback   } from 'react';\r\nimport { Row, Col, Comment, Tooltip, Typography, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { fetchReply } from '../store/thunk/thunkPost';\r\n\r\nconst { Paragraph } = Typography;\r\nconst paragraphData = { rows: 3, expandable: true, symbol: <span>more</span> }\r\n\r\nconst Desc = ({ post }) => {\r\n    const { PostReply } = useSelector(state => state.storePost);\r\n    const { isLogin, userId } = useSelector(state => state.storeUser);\r\n    const dispatch = useDispatch();\r\n\r\n    const [replyContent, setReplyContent] = useState('');\r\n    \r\n    const onChangeReply = useCallback(e => {\r\n        setReplyContent(e.target.value);\r\n    }, []);\r\n\r\n    const onClickReply = useCallback(index => () => {\r\n        replyContent !== '' && dispatch(fetchReply({ replyContent, userId, index }));\r\n        setReplyContent('');\r\n    }, [replyContent, isLogin]);\r\n    return (\r\n        <Row>\r\n            <Col span={24}>\r\n                <Paragraph\r\n                    ellipsis={paragraphData}>\r\n                    {post.post_content}\r\n                </Paragraph>\r\n            </Col>\r\n            {/*댓글*/}\r\n            {\r\n                PostReply.map((reply, index) => (\r\n                    reply.reply_post_author === post.post_id &&\r\n                    <Col span={24} key={index}>\r\n                        <Comment\r\n                            author={<span>{reply.reply_user_author}</span>}\r\n                            content={<p>{reply.reply_content}</p>}\r\n                            datetime={<Tooltip title={reply.reply_createdate}><span>{reply.reply_createdate}</span></Tooltip>}\r\n                        />\r\n                    </Col>\r\n                ))\r\n            }{\r\n                isLogin &&\r\n                <React.Fragment>\r\n                    <Col md={20} xs={18}>\r\n                        <Input onChange={onChangeReply} value={replyContent} placeholder=\"댓글...\" bordered={false} onPressEnter={onClickReply(post.post_id)} />\r\n                    </Col>\r\n                    <Col md={4} xs={6}><Button onClick={onClickReply(post.post_id)} type=\"text\">게시</Button></Col>\r\n                </React.Fragment>\r\n            }\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Desc;","import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Card, Typography } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchPost } from '../store/thunk/thunkPost';\r\nimport CoverImage from './coverImage'\r\nimport Desc from './desc';\r\n\r\nconst { Meta } = Card;\r\nconst { Title } = Typography;\r\n\r\nconst Post = () => {\r\n    const dispatch = useDispatch();\r\n    const { Post, callPost } = useSelector(state => state.storePost);\r\n    const [skip, setSkip] = useState(0);\r\n\r\n    const onscroll = () => {\r\n        const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\r\n        if ((scrollTop + clientHeight) > scrollHeight - 5) {\r\n            console.log(`scrollTop :: ${scrollTop} scrollHeight :: ${scrollHeight} clientHeight :: ${clientHeight}`);\r\n            setSkip(skip + 4);\r\n            dispatch(fetchPost(skip));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', onscroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onscroll);\r\n        }\r\n    }, [onscroll]);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPost(skip));\r\n        setSkip(skip + 4);\r\n    }, []);\r\n\r\n    return (\r\n        callPost &&\r\n        <Row>\r\n            <Col md={10} xs={24}>\r\n                {\r\n                    Post.map((e, index) => (\r\n                        <Cards\r\n                            key={index}\r\n                            hoverable\r\n                            style={{ maxWidth: '100%' }}\r\n                            title={\r\n                                <Row align=\"center\">\r\n                                    {/* <Col md={3} xs={4}><Avatar icon={<UserOutlined />} /></Col> */}\r\n                                    <Col md={21} xs={20}>{e.post_author}</Col>\r\n                                </Row>\r\n                            }\r\n                            cover={<CoverImage key={index} post={e} />}\r\n                        >\r\n                            <Meta\r\n                                title={<Title level={4}>{e.post_title}</Title>}\r\n                                description={<Desc post={e} />}\r\n                            />\r\n                        </Cards>\r\n                    ))}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n\r\nconst Cards = styled(Card)`\r\n  margin: 30px 0;\r\n`;"],"sourceRoot":""}