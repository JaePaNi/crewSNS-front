[{"C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\index.js":"1","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\App.js":"2","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\main.js":"3","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\notLogin.js":"4","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\login.js":"5","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\signUp.js":"6","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\store\\index.js":"7","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\store\\configure.js":"8","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\store\\storeUser.js":"9","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\store\\storePost.js":"10","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\axios\\axiosPost.js":"11","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\postList.js":"12","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\postAdd.js":"13"},{"size":657,"mtime":1611104187794,"results":"14","hashOfConfig":"15"},{"size":828,"mtime":1611104187787,"results":"16","hashOfConfig":"15"},{"size":1034,"mtime":1611105674201,"results":"17","hashOfConfig":"15"},{"size":2247,"mtime":1611104187790,"results":"18","hashOfConfig":"15"},{"size":1399,"mtime":1611106482160,"results":"19","hashOfConfig":"15"},{"size":2803,"mtime":1611104187793,"results":"20","hashOfConfig":"15"},{"size":223,"mtime":1611104187795,"results":"21","hashOfConfig":"15"},{"size":245,"mtime":1611104187795,"results":"22","hashOfConfig":"15"},{"size":600,"mtime":1611104187797,"results":"23","hashOfConfig":"15"},{"size":2600,"mtime":1611104187796,"results":"24","hashOfConfig":"15"},{"size":260,"mtime":1611104187788,"results":"25","hashOfConfig":"15"},{"size":5192,"mtime":1611104774616,"results":"26","hashOfConfig":"15"},{"size":1695,"mtime":1611106533335,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"sz8iyi",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"31"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"31"},{"filePath":"61","messages":"62","errorCount":1,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"31"},"C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\index.js",["64"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { createBrowserHistory } from 'history';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/configure';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  body {\r\n    background-color: #fff3e0;\r\n  }\r\n`\r\n\r\nconst customHistory = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    <GlobalStyle />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n  ;\r\n",["65","66"],"C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\App.js",[],"C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\main.js",["67"],"import React, { Suspense, useMemo } from 'react';\r\n\r\nimport { Row, Col } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Login from './login';\r\nimport NotLogin from './notLogin';\r\nconst PostList = React.lazy(() => import('./postList'));\r\n\r\nconst Main = () => {\r\n    const isLogin = useSelector(state => state.storeUser.isLogin);\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={2} />\r\n            <Col md={22} xs={22}>\r\n                <Row justify='space-around'>\r\n                <Col md={6} xs={24}>{isLogin === true ? <Login /> : <NotLogin />}</Col>\r\n                    {/* <Col md={6} xs={24}>{isLogin === true ? login : notLogin}</Col> */}\r\n                    <Col md={1} />\r\n                    <Col md={17} xs={24}>\r\n                        <Suspense fallback={<div>loading...</div>}>\r\n                            <PostList />\r\n                        </Suspense>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Main;","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\notLogin.js",["68","69"],"import React, { useState, useEffect, useCallback, useRef, memo } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button } from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { login } from '../store/storeUser';\r\n\r\nconst LoginForm = () => {\r\n    const [userInput, setUserInput] = useState({ id: null, pw: null });\r\n    const onloadFocus = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //로그인 아닌 경우 아이디 입력 창에 자동 포커싱\r\n    useEffect(() => {\r\n        onloadFocus.current.focus();\r\n    }, []);\r\n\r\n    const onInputSuccess = useCallback(e => {\r\n        setUserInput({ ...e });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        userInput.id !== null ?\r\n            userInput.pw !== null ?\r\n                dispatch(login({ ...userInput })) : console.log('undefined') : console.log('undefined');\r\n    }, [userInput]);\r\n\r\n    const onInputError = useCallback(e => { });\r\n\r\n    return (\r\n        <Wrap>\r\n            <Form size='middle' onFinish={onInputSuccess} onFinishFailed={onInputError}\r\n                wrapperCol={{ md: 18, xs: 12 }}>\r\n                <Form.Item name=\"id\" rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '계정 입력'\r\n                    }\r\n                ]}>\r\n                    <Input placeholder=\"아이디\" ref={onloadFocus} />\r\n                </Form.Item>\r\n                <Form.Item name=\"pw\" rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '비밀번호 입력'\r\n                    }\r\n                ]}>\r\n                    <Input type=\"password\" placeholder=\"비밀번호\" />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <LoginButton type=\"primary\" htmlType=\"submit\">로그인</LoginButton>\r\n                    <Button type=\"ghost\"><Link to='/signup'>회원가입</Link></Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Wrap>\r\n    );\r\n}\r\n\r\nexport default memo(LoginForm);\r\n\r\n\r\nconst LoginButton = styled(Button)`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Wrap = styled.div`\r\n  position: sticky;\r\n  top: 15px;\r\n`;","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\login.js",["70","71"],"import { memo, useState, useEffect, useCallback } from 'react';\r\nimport { Card, Typography, Row, Col, Button } from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logout } from '../store/storeUser';\r\n\r\nimport PostAdd from './postAdd';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n    const userNickname = useSelector(state => state.storeUser.userNickname);\r\n    const onClickLogout = useCallback(() => {\r\n        dispatch(logout());\r\n    }, []);\r\n\r\n    const [state, setState] = useState({ visible: false });\r\n    const onClickAddPost = useCallback(() => {\r\n        state.visible ? setState({visible : false}) : setState({visible : true});        \r\n    }, [state]);\r\n\r\n    return (\r\n        <Card size=\"small\" hoverable>\r\n            <Row>\r\n                <Col span={24} style={{ textAlign: 'center' }}><Title level={4}>{userNickname}님</Title></Col>\r\n                <ColButton span={24}><Button type='ghost' block onClick={onClickAddPost}>포스트 작성</Button></ColButton>\r\n                <ColButton span={24}><Button danger block onClick={onClickLogout}>로그아웃</Button></ColButton>\r\n                <PostAdd state={state} />\r\n            </Row>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default memo(Login);\r\n\r\nconst ColButton = styled(Col)`\r\n    margin: 5px 0;\r\n`;","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\signUp.js",["72","73"],"import React, {useState, useEffect, useCallback, useRef} from 'react';\r\n\r\nimport {Form, Input, Button, Row, Col} from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nconst SignUp = () => {\r\n    const [inputData, setInputData] = useState({id: null, pw: null, pwCheck: true});\r\n    const onloadFocus = useRef();\r\n    const onInputSuccess = useCallback(e => {\r\n        /*inputData pwCheck가 true이면 넘어 온 값 inputData useState에 저장*/\r\n        inputData.pwCheck &&\r\n        setInputData({...e, pwCheck: true});\r\n    }, []);\r\n\r\n    const onInputError = useCallback(e => {\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        onloadFocus.current.focus();\r\n    }, []);\r\n\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={6} xs={22}>\r\n                <Form size='middle' onFinish={onInputSuccess} onFinishFailed={onInputError}\r\n                      wrapperCol={{md: 24, xs: 12}}>\r\n\r\n                    <Form.Item name=\"id\" rules={[\r\n                        {\r\n                            required: true,\r\n                            message: '사용할 계정 입력해주세요'\r\n                        }\r\n                    ]}>\r\n                        <Input placeholder=\"사용할 아이디\" ref={onloadFocus}/>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"pw\" rules={[\r\n                        {\r\n                            required: true,\r\n                            message: '사용할 비밀번호 입력해주세요'\r\n                        }\r\n                    ]}>\r\n                        <Input.Password placeholder=\"사용할 비밀번호\"\r\n                            /*pw 확인을 하기 위해서 inputData useState에 저장*/\r\n                                        onChange={e => setInputData({...inputData, pw: e.target.value})}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"pwCheck\">\r\n                        <Input.Password placeholder=\"비밀번호 확인\"\r\n                                        onChange={e => inputData.pw === e.target.value\r\n                                            ? setInputData({...inputData, pwCheck: true})\r\n                                            : setInputData({...inputData, pwCheck: false})}/>\r\n                        {inputData.pwCheck === false ? <PwCheck>비밀번호가 다릅니다.</PwCheck> : undefined}\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <LoginButton type=\"primary\" htmlType=\"submit\" block>회원가입</LoginButton>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default SignUp;\r\n\r\n\r\nconst LoginButton = styled(Button)`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst PwCheck = styled.div`\r\n  font-weight: bold;\r\n  color: red;\r\n`;","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\store\\index.js",[],"C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\store\\configure.js",[],"C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\store\\storeUser.js",["74"],"import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    isLogin: false,\r\n    userNickname: null,\r\n};\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    reducers: {\r\n        login: ((state, action) => {\r\n            const {id, pw} = action.payload;\r\n            state.isLogin = true;\r\n            state.userNickname = id;\r\n        }),\r\n        logout: ((state) => {\r\n            state.isLogin = false;\r\n            state.userNickname = null;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {login, logout} = userSlice.actions;\r\nexport default userSlice.reducer;","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\store\\storePost.js",[],"C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\axios\\axiosPost.js",[],["75","76"],"C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\postList.js",["77","78","79","80"],"import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport { Row, Col, Card, Image, Typography, Input, Button, Comment, Tooltip, Avatar } from 'antd';\r\n\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\nimport styled from 'styled-components';\r\nimport LazyLoad from 'react-lazyload';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { fetchPost, registReply } from '../store/storePost';\r\n\r\nconst { Meta } = Card;\r\nconst { Title } = Typography;\r\nconst { Paragraph } = Typography;\r\n\r\nconst paragraphData = { rows: 3, expandable: true, symbol: <span>more</span> }\r\n\r\nconst Post = () => {\r\n    const dispatch = useDispatch();\r\n    const { Post, loading } = useSelector(state => state.storePost);\r\n    const { isLogin, userNickname } = useSelector(state => state.storeUser);\r\n\r\n    const [inputReply, setInputReply] = useState('');\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPost());\r\n    }, []);\r\n\r\n    const onChangeReply = useCallback(e => {\r\n        setInputReply(e.target.value);\r\n    }, []);\r\n\r\n    const onClickReply = useCallback(index => {\r\n        const time = new Date().getDate();\r\n        if (isLogin) {\r\n            inputReply !== '' && dispatch(registReply({ inputReply, userNickname, time, index }));\r\n            setInputReply('');\r\n        } else alert('로그인이 필요합니다.');\r\n    }, [inputReply, isLogin]);\r\n\r\n    return (\r\n        loading &&\r\n        <Row>\r\n            <Col md={10} xs={24}>\r\n                {\r\n                    Post.map((e, index) => (\r\n                        index !== 0 &&\r\n                        <Cards\r\n                            hoverable\r\n                            style={{ maxWidth: '100%' }}\r\n                            title={\r\n                                <Row align=\"center\">\r\n                                    <Col md={3} xs={4}><Avatar icon={<UserOutlined />} /></Col>\r\n                                    <Col md={21} xs={20}>{e.postUser}</Col>\r\n                                </Row>\r\n                            }\r\n                            cover={\r\n                                <LazyLoad offset={100} scroll=\"true\" placeholder={<div>loading...</div>} height=\"300px\"\r\n                                    throttle={100}>\r\n                                    <Image.PreviewGroup>\r\n                                        <Image\r\n                                            width=\"100%\"\r\n                                            height=\"300px\"\r\n                                            src={e.postImage[0]}\r\n                                        />\r\n                                    </Image.PreviewGroup>\r\n                                </LazyLoad>\r\n                            }\r\n                        >\r\n                            <Meta\r\n                                title={<Title level={4}>{e.postTitle}</Title>}\r\n                                description={\r\n                                    <Row>\r\n                                        <Col span={24}>\r\n                                            <Paragraph\r\n                                                ellipsis={paragraphData}>\r\n                                                {e.postContent}\r\n                                            </Paragraph>\r\n                                        </Col>\r\n                                        {/*댓글*/}\r\n                                        {\r\n                                            e.postReply.map(reply => (\r\n                                                <Col span={24}>\r\n                                                    <Comment\r\n                                                        author={<span>{reply.replyUser}</span>}\r\n                                                        content={<p>{reply.replyContent}</p>}\r\n                                                        datetime={\r\n                                                            <Tooltip title={reply.replyCreateDate}>\r\n                                                                <span>{reply.replyCreateDate}</span>\r\n                                                            </Tooltip>\r\n                                                        }\r\n                                                    />\r\n                                                </Col>\r\n                                            ))\r\n                                        }\r\n                                        {/*댓글입력칸*/}\r\n                                        <Col md={20} xs={18}>\r\n                                            <Input onChange={onChangeReply} value={inputReply} placeholder=\"댓글\" bordered={false} onPressEnter={() => onClickReply(index)} /></Col>\r\n                                        {/* 댓글등록버튼 */}\r\n                                        <Col md={4} xs={6}><Button onClick={() => onClickReply(index)} type=\"text\">게시</Button></Col>\r\n                                    </Row>\r\n                                } />\r\n                        </Cards>\r\n                    ))}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n\r\nconst Cards = styled(Card)`\r\n  margin: 30px 0;\r\n`;","C:\\Users\\JaePaNi\\Desktop\\dev\\crewSNS-front\\src\\component\\postAdd.js",["81","82","83","84"],"import React, { useEffect } from 'react';\r\nimport { Drawer, Form, Button, Col, Row, Input, Select, DatePicker } from 'antd';\r\n\r\nconst postAdd = (state) => {\r\n    useEffect(() => {\r\n        console.log(`state :: ${state}`);\r\n    }, [state]);\r\n    return (\r\n        <Drawer\r\n            title=\"Create a new account\"\r\n            width={720}\r\n            onClose={state}\r\n            visible={state}\r\n            bodyStyle={{ paddingBottom: 80 }}\r\n        >\r\n            <Form layout=\"vertical\" hideRequiredMark>\r\n                <Row gutter={16}>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            name=\"name\"\r\n                            label=\"Name\"\r\n                            rules={[{ required: true, message: 'Please enter user name' }]}\r\n                        >\r\n                            <Input placeholder=\"Please enter user name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            name=\"url\"\r\n                            label=\"Url\"\r\n                            rules={[{ required: true, message: 'Please enter url' }]}\r\n                        >\r\n                            <Input\r\n                                style={{ width: '100%' }}\r\n                                addonBefore=\"http://\"\r\n                                addonAfter=\".com\"\r\n                                placeholder=\"Please enter url\"\r\n                            />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default postAdd;",{"ruleId":"85","severity":1,"message":"86","line":21,"column":7,"nodeType":"87","messageId":"88","endLine":21,"endColumn":20},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"85","severity":1,"message":"93","line":1,"column":27,"nodeType":"87","messageId":"88","endLine":1,"endColumn":34},{"ruleId":"94","severity":1,"message":"95","line":28,"column":8,"nodeType":"96","endLine":28,"endColumn":19,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"98","line":30,"column":26,"nodeType":"87","endLine":30,"endColumn":37},{"ruleId":"85","severity":1,"message":"99","line":1,"column":26,"nodeType":"87","messageId":"88","endLine":1,"endColumn":35},{"ruleId":"94","severity":1,"message":"100","line":17,"column":8,"nodeType":"96","endLine":17,"endColumn":10,"suggestions":"101"},{"ruleId":"94","severity":1,"message":"102","line":13,"column":8,"nodeType":"96","endLine":13,"endColumn":10,"suggestions":"103"},{"ruleId":"94","severity":1,"message":"98","line":15,"column":26,"nodeType":"87","endLine":15,"endColumn":37},{"ruleId":"85","severity":1,"message":"104","line":13,"column":24,"nodeType":"87","messageId":"88","endLine":13,"endColumn":26},{"ruleId":"89","replacedBy":"105"},{"ruleId":"91","replacedBy":"106"},{"ruleId":"85","severity":1,"message":"107","line":1,"column":51,"nodeType":"87","messageId":"88","endLine":1,"endColumn":57},{"ruleId":"85","severity":1,"message":"93","line":1,"column":59,"nodeType":"87","messageId":"88","endLine":1,"endColumn":66},{"ruleId":"94","severity":1,"message":"95","line":28,"column":8,"nodeType":"96","endLine":28,"endColumn":10,"suggestions":"108"},{"ruleId":"94","severity":1,"message":"109","line":40,"column":8,"nodeType":"96","endLine":40,"endColumn":29,"suggestions":"110"},{"ruleId":"85","severity":1,"message":"111","line":2,"column":24,"nodeType":"87","messageId":"88","endLine":2,"endColumn":30},{"ruleId":"85","severity":1,"message":"112","line":2,"column":49,"nodeType":"87","messageId":"88","endLine":2,"endColumn":55},{"ruleId":"85","severity":1,"message":"113","line":2,"column":57,"nodeType":"87","messageId":"88","endLine":2,"endColumn":67},{"ruleId":"114","severity":2,"message":"115","line":5,"column":5,"nodeType":"87","endLine":5,"endColumn":14},"no-unused-vars","'customHistory' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["116"],"no-negated-in-lhs",["117"],"'useMemo' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["118"],"React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'useEffect' is defined but never used.","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["119"],"React Hook useCallback has a missing dependency: 'inputData.pwCheck'. Either include it or remove the dependency array.",["120"],"'pw' is assigned a value but never used.",["116"],["117"],"'useRef' is defined but never used.",["121"],"React Hook useCallback has missing dependencies: 'dispatch' and 'userNickname'. Either include them or remove the dependency array.",["122"],"'Button' is defined but never used.","'Select' is defined but never used.","'DatePicker' is defined but never used.","react-hooks/rules-of-hooks","React Hook \"useEffect\" is called in function \"postAdd\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"125","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [dispatch, userInput]",{"range":"132","text":"133"},"Update the dependencies array to be: [dispatch]",{"range":"134","text":"135"},"Update the dependencies array to be: [inputData.pwCheck]",{"range":"136","text":"137"},{"range":"138","text":"135"},"Update the dependencies array to be: [dispatch, inputReply, isLogin, userNickname]",{"range":"139","text":"140"},[892,903],"[dispatch, userInput]",[563,565],"[dispatch]",[514,516],"[inputData.pwCheck]",[946,948],[1349,1370],"[dispatch, inputReply, isLogin, userNickname]"]