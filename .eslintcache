[{"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\index.js":"1","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\App.js":"2","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\configure.js":"3","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\main.js":"4","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\signUp.js":"5","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\index.js":"6","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postList.js":"7","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\login.js":"8","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\notLogin.js":"9","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storeUser.js":"10","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storePost.js":"11","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postAdd.js":"12","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\axios\\axiosPost.js":"13","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storeGetPost.js":"14","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storeAddPost.js":"15"},{"size":657,"mtime":1611107861987,"results":"16","hashOfConfig":"17"},{"size":944,"mtime":1611125695898,"results":"18","hashOfConfig":"17"},{"size":245,"mtime":1611107861988,"results":"19","hashOfConfig":"17"},{"size":945,"mtime":1611116714636,"results":"20","hashOfConfig":"17"},{"size":2803,"mtime":1611107861986,"results":"21","hashOfConfig":"17"},{"size":310,"mtime":1611126902122,"results":"22","hashOfConfig":"17"},{"size":5198,"mtime":1611126487341,"results":"23","hashOfConfig":"17"},{"size":1353,"mtime":1611130244055,"results":"24","hashOfConfig":"17"},{"size":2247,"mtime":1611107861983,"results":"25","hashOfConfig":"17"},{"size":600,"mtime":1611107861991,"results":"26","hashOfConfig":"17"},{"size":2600,"mtime":1611126348569,"results":"27","hashOfConfig":"17"},{"size":2308,"mtime":1611128882979,"results":"28","hashOfConfig":"17"},{"size":260,"mtime":1611130086622,"results":"29","hashOfConfig":"17"},{"size":2611,"mtime":1611126654746,"results":"30","hashOfConfig":"17"},{"size":703,"mtime":1611128718117,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"2v2suu",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"35"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"35"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"35"},"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\index.js",["71"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { createBrowserHistory } from 'history';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/configure';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  body {\r\n    background-color: #fff3e0;\r\n  }\r\n`\r\n\r\nconst customHistory = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    <GlobalStyle />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n  ;\r\n",["72","73"],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\App.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\configure.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\main.js",["74"],"import React, { Suspense, useMemo } from 'react';\r\n\r\nimport { Row, Col } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Login from './login';\r\nimport NotLogin from './notLogin';\r\nconst PostList = React.lazy(() => import('./postList'));\r\n\r\nconst Main = () => {\r\n    const isLogin = useSelector(state => state.storeUser.isLogin);\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={2} />\r\n            <Col md={22} xs={22}>\r\n                <Row justify='space-around'>\r\n                    <Col md={6} xs={24}>{isLogin === true ? <Login /> : <NotLogin />}</Col>\r\n                    <Col md={1} />\r\n                    <Col md={17} xs={24}>\r\n                        <Suspense fallback={<div>loading...</div>}>\r\n                            <PostList />\r\n                        </Suspense>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Main;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\signUp.js",["75","76"],"import React, {useState, useEffect, useCallback, useRef} from 'react';\r\n\r\nimport {Form, Input, Button, Row, Col} from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nconst SignUp = () => {\r\n    const [inputData, setInputData] = useState({id: null, pw: null, pwCheck: true});\r\n    const onloadFocus = useRef();\r\n    const onInputSuccess = useCallback(e => {\r\n        /*inputData pwCheck가 true이면 넘어 온 값 inputData useState에 저장*/\r\n        inputData.pwCheck &&\r\n        setInputData({...e, pwCheck: true});\r\n    }, []);\r\n\r\n    const onInputError = useCallback(e => {\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        onloadFocus.current.focus();\r\n    }, []);\r\n\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={6} xs={22}>\r\n                <Form size='middle' onFinish={onInputSuccess} onFinishFailed={onInputError}\r\n                      wrapperCol={{md: 24, xs: 12}}>\r\n\r\n                    <Form.Item name=\"id\" rules={[\r\n                        {\r\n                            required: true,\r\n                            message: '사용할 계정 입력해주세요'\r\n                        }\r\n                    ]}>\r\n                        <Input placeholder=\"사용할 아이디\" ref={onloadFocus}/>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"pw\" rules={[\r\n                        {\r\n                            required: true,\r\n                            message: '사용할 비밀번호 입력해주세요'\r\n                        }\r\n                    ]}>\r\n                        <Input.Password placeholder=\"사용할 비밀번호\"\r\n                            /*pw 확인을 하기 위해서 inputData useState에 저장*/\r\n                                        onChange={e => setInputData({...inputData, pw: e.target.value})}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"pwCheck\">\r\n                        <Input.Password placeholder=\"비밀번호 확인\"\r\n                                        onChange={e => inputData.pw === e.target.value\r\n                                            ? setInputData({...inputData, pwCheck: true})\r\n                                            : setInputData({...inputData, pwCheck: false})}/>\r\n                        {inputData.pwCheck === false ? <PwCheck>비밀번호가 다릅니다.</PwCheck> : undefined}\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <LoginButton type=\"primary\" htmlType=\"submit\" block>회원가입</LoginButton>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default SignUp;\r\n\r\n\r\nconst LoginButton = styled(Button)`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst PwCheck = styled.div`\r\n  font-weight: bold;\r\n  color: red;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\index.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postList.js",["77","78","79","80"],"import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport { Row, Col, Card, Image, Typography, Input, Button, Comment, Tooltip, Avatar } from 'antd';\r\n\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\nimport styled from 'styled-components';\r\nimport LazyLoad from 'react-lazyload';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { fetchPost, registReply } from '../store/storeGetPost';\r\n\r\nconst { Meta } = Card;\r\nconst { Title } = Typography;\r\nconst { Paragraph } = Typography;\r\n\r\nconst paragraphData = { rows: 3, expandable: true, symbol: <span>more</span> }\r\n\r\nconst Post = () => {\r\n    const dispatch = useDispatch();\r\n    const { Post, loading } = useSelector(state => state.storeGetPost);\r\n    const { isLogin, userNickname } = useSelector(state => state.storeUser);\r\n\r\n    const [inputReply, setInputReply] = useState('');\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPost());\r\n    }, []);\r\n\r\n    const onChangeReply = useCallback(e => {\r\n        setInputReply(e.target.value);\r\n    }, []);\r\n\r\n    const onClickReply = useCallback(index => {\r\n        const time = new Date().getDate();\r\n        if (isLogin) {\r\n            inputReply !== '' && dispatch(registReply({ inputReply, userNickname, time, index }));\r\n            setInputReply('');\r\n        } else alert('로그인이 필요합니다.');\r\n    }, [inputReply, isLogin]);\r\n\r\n    return (\r\n        loading &&\r\n        <Row>\r\n            <Col md={10} xs={24}>\r\n                {\r\n                    Post.map((e, index) => (\r\n                        index !== 0 &&\r\n                        <Cards\r\n                            hoverable\r\n                            style={{ maxWidth: '100%' }}\r\n                            title={\r\n                                <Row align=\"center\">\r\n                                    <Col md={3} xs={4}><Avatar icon={<UserOutlined />} /></Col>\r\n                                    <Col md={21} xs={20}>{e.postUser}</Col>\r\n                                </Row>\r\n                            }\r\n                            cover={\r\n                                <LazyLoad offset={100} scroll=\"true\" placeholder={<div>loading...</div>} height=\"300px\"\r\n                                    throttle={100}>\r\n                                    <Image.PreviewGroup>\r\n                                        <Image\r\n                                            width=\"100%\"\r\n                                            height=\"300px\"\r\n                                            src={e.postImage[0]}\r\n                                        />\r\n                                    </Image.PreviewGroup>\r\n                                </LazyLoad>\r\n                            }\r\n                        >\r\n                            <Meta\r\n                                title={<Title level={4}>{e.postTitle}</Title>}\r\n                                description={\r\n                                    <Row>\r\n                                        <Col span={24}>\r\n                                            <Paragraph\r\n                                                ellipsis={paragraphData}>\r\n                                                {e.postContent}\r\n                                            </Paragraph>\r\n                                        </Col>\r\n                                        {/*댓글*/}\r\n                                        {\r\n                                            e.postReply.map(reply => (\r\n                                                <Col span={24}>\r\n                                                    <Comment\r\n                                                        author={<span>{reply.replyUser}</span>}\r\n                                                        content={<p>{reply.replyContent}</p>}\r\n                                                        datetime={\r\n                                                            <Tooltip title={reply.replyCreateDate}>\r\n                                                                <span>{reply.replyCreateDate}</span>\r\n                                                            </Tooltip>\r\n                                                        }\r\n                                                    />\r\n                                                </Col>\r\n                                            ))\r\n                                        }\r\n                                        {/*댓글입력칸*/}\r\n                                        <Col md={20} xs={18}>\r\n                                            <Input onChange={onChangeReply} value={inputReply} placeholder=\"댓글\" bordered={false} onPressEnter={() => onClickReply(index)} /></Col>\r\n                                        {/* 댓글등록버튼 */}\r\n                                        <Col md={4} xs={6}><Button onClick={() => onClickReply(index)} type=\"text\">게시</Button></Col>\r\n                                    </Row>\r\n                                } />\r\n                        </Cards>\r\n                    ))}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n\r\nconst Cards = styled(Card)`\r\n  margin: 30px 0;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\login.js",["81"],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\notLogin.js",["82","83"],"import React, { useState, useEffect, useCallback, useRef, memo } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button } from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { login } from '../store/storeUser';\r\n\r\nconst LoginForm = () => {\r\n    const [userInput, setUserInput] = useState({ id: null, pw: null });\r\n    const onloadFocus = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //로그인 아닌 경우 아이디 입력 창에 자동 포커싱\r\n    useEffect(() => {\r\n        onloadFocus.current.focus();\r\n    }, []);\r\n\r\n    const onInputSuccess = useCallback(e => {\r\n        setUserInput({ ...e });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        userInput.id !== null ?\r\n            userInput.pw !== null ?\r\n                dispatch(login({ ...userInput })) : console.log('undefined') : console.log('undefined');\r\n    }, [userInput]);\r\n\r\n    const onInputError = useCallback(e => { });\r\n\r\n    return (\r\n        <Wrap>\r\n            <Form size='middle' onFinish={onInputSuccess} onFinishFailed={onInputError}\r\n                wrapperCol={{ md: 18, xs: 12 }}>\r\n                <Form.Item name=\"id\" rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '계정 입력'\r\n                    }\r\n                ]}>\r\n                    <Input placeholder=\"아이디\" ref={onloadFocus} />\r\n                </Form.Item>\r\n                <Form.Item name=\"pw\" rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '비밀번호 입력'\r\n                    }\r\n                ]}>\r\n                    <Input type=\"password\" placeholder=\"비밀번호\" />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <LoginButton type=\"primary\" htmlType=\"submit\">로그인</LoginButton>\r\n                    <Button type=\"ghost\"><Link to='/signup'>회원가입</Link></Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Wrap>\r\n    );\r\n}\r\n\r\nexport default memo(LoginForm);\r\n\r\n\r\nconst LoginButton = styled(Button)`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Wrap = styled.div`\r\n  position: sticky;\r\n  top: 15px;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storeUser.js",["84"],"import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    isLogin: false,\r\n    userNickname: null,\r\n};\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    reducers: {\r\n        login: ((state, action) => {\r\n            const {id, pw} = action.payload;\r\n            state.isLogin = true;\r\n            state.userNickname = id;\r\n        }),\r\n        logout: ((state) => {\r\n            state.isLogin = false;\r\n            state.userNickname = null;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {login, logout} = userSlice.actions;\r\nexport default userSlice.reducer;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storePost.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postAdd.js",["85","86","87","88","89"],"import React, {useCallback, useEffect, useRef} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {Row, Col, Form, Input, Button} from 'antd';\r\nimport {UploadOutlined} from '@ant-design/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {imageUpload, postContentList} from '../store/storeAddPost';\r\n\r\nconst PostAdd = () => {\r\n    const clickImage = useRef();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const {isLogin} = useSelector(state => state.storeUser);\r\n    const formData = new FormData();\r\n\r\n    const onChangeImage = useCallback(e => {\r\n        formData.append('image', e.target.files);\r\n    }, []);\r\n\r\n    const onClickImageUpload = useCallback(() => {\r\n        clickImage.current.click();\r\n    }, [clickImage.current]);\r\n\r\n    const onFinish = useCallback(e => {\r\n        dispatch(postContentList(formData));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        !isLogin && alert('로그인을 해야합니다.');\r\n        !isLogin && history.push('/');\r\n    }, []);\r\n\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={22} xs={22} style={{textAlign: 'center', margin: '50px 0', fontSize: 20}}>오늘은 어떤 포스트를 작성할건가요?</Col>\r\n            <Col md={10} xs={22}>\r\n                <Form onFinish={onFinish} encType='multipart/form-data'>\r\n                    <Form.Item name='title'>\r\n                        <Input placeholder=\"포스트의 제목은 무엇인가요?\"/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name='content'>\r\n                        <Input.TextArea placeholder=\"어떤 내용을 작성하시겠어요?\" autoSize={{minRows: 7}}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <input ref={clickImage} type='file' multiple hidden onChange={onChangeImage}/>\r\n                        <Button block onClick={onClickImageUpload} icon={<UploadOutlined/>}>이미지를 업로드 하시겠어요?</Button>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button block type=\"primary\" htmlType=\"submit\">포스트 업로드</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default PostAdd;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\axios\\axiosPost.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storeGetPost.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storeAddPost.js",["90","91"],"import {configureStore, createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    title: '',\r\n    content: '',\r\n    images: []\r\n}\r\n\r\nconst addPostSlice = createSlice({\r\n    name: 'addPost',\r\n    initialState,\r\n    reducers: {\r\n        imageUpload: ((state, action) => {\r\n            console.log(action.payload);\r\n        }),\r\n        postContentList: ((state, action) => {\r\n            console.log(action.payload);\r\n            state.title = action.payload.title;\r\n            state.content = action.payload.content;\r\n        }),\r\n    },\r\n    extraReducers: {}\r\n});\r\n\r\nexport const {imageUpload, postContentList} = addPostSlice.actions;\r\nexport default addPostSlice.reducer;",{"ruleId":"92","severity":1,"message":"93","line":21,"column":7,"nodeType":"94","messageId":"95","endLine":21,"endColumn":20},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"92","severity":1,"message":"100","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":34},{"ruleId":"101","severity":1,"message":"102","line":13,"column":8,"nodeType":"103","endLine":13,"endColumn":10,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"105","line":15,"column":26,"nodeType":"94","endLine":15,"endColumn":37},{"ruleId":"92","severity":1,"message":"106","line":1,"column":51,"nodeType":"94","messageId":"95","endLine":1,"endColumn":57},{"ruleId":"92","severity":1,"message":"100","line":1,"column":59,"nodeType":"94","messageId":"95","endLine":1,"endColumn":66},{"ruleId":"101","severity":1,"message":"107","line":28,"column":8,"nodeType":"103","endLine":28,"endColumn":10,"suggestions":"108"},{"ruleId":"101","severity":1,"message":"109","line":40,"column":8,"nodeType":"103","endLine":40,"endColumn":29,"suggestions":"110"},{"ruleId":"101","severity":1,"message":"111","line":15,"column":8,"nodeType":"103","endLine":15,"endColumn":10,"suggestions":"112"},{"ruleId":"101","severity":1,"message":"107","line":28,"column":8,"nodeType":"103","endLine":28,"endColumn":19,"suggestions":"113"},{"ruleId":"101","severity":1,"message":"105","line":30,"column":26,"nodeType":"94","endLine":30,"endColumn":37},{"ruleId":"92","severity":1,"message":"114","line":13,"column":24,"nodeType":"94","messageId":"95","endLine":13,"endColumn":26},{"ruleId":"92","severity":1,"message":"115","line":6,"column":9,"nodeType":"94","messageId":"95","endLine":6,"endColumn":20},{"ruleId":"101","severity":1,"message":"116","line":17,"column":8,"nodeType":"103","endLine":17,"endColumn":10,"suggestions":"117"},{"ruleId":"101","severity":1,"message":"118","line":21,"column":8,"nodeType":"103","endLine":21,"endColumn":28,"suggestions":"119"},{"ruleId":"101","severity":1,"message":"120","line":25,"column":8,"nodeType":"103","endLine":25,"endColumn":10,"suggestions":"121"},{"ruleId":"101","severity":1,"message":"122","line":30,"column":8,"nodeType":"103","endLine":30,"endColumn":10,"suggestions":"123"},{"ruleId":"92","severity":1,"message":"124","line":1,"column":9,"nodeType":"94","messageId":"95","endLine":1,"endColumn":23},{"ruleId":"92","severity":1,"message":"125","line":1,"column":25,"nodeType":"94","messageId":"95","endLine":1,"endColumn":41},"no-unused-vars","'customHistory' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["126"],"no-negated-in-lhs",["127"],"'useMemo' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'inputData.pwCheck'. Either include it or remove the dependency array.","ArrayExpression",["128"],"React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["129"],"React Hook useCallback has missing dependencies: 'dispatch' and 'userNickname'. Either include them or remove the dependency array.",["130"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["131"],["132"],"'pw' is assigned a value but never used.","'imageUpload' is defined but never used.","React Hook useCallback has a missing dependency: 'formData'. Either include it or remove the dependency array.",["133"],"React Hook useCallback has an unnecessary dependency: 'clickImage.current'. Either exclude it or remove the dependency array. Mutable values like 'clickImage.current' aren't valid dependencies because mutating them doesn't re-render the component.",["134"],"React Hook useCallback has missing dependencies: 'dispatch' and 'formData'. Either include them or remove the dependency array.",["135"],"React Hook useEffect has missing dependencies: 'history' and 'isLogin'. Either include them or remove the dependency array.",["136"],"'configureStore' is defined but never used.","'createAsyncThunk' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"139","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [inputData.pwCheck]",{"range":"154","text":"155"},"Update the dependencies array to be: [dispatch]",{"range":"156","text":"157"},"Update the dependencies array to be: [dispatch, inputReply, isLogin, userNickname]",{"range":"158","text":"159"},{"range":"160","text":"157"},"Update the dependencies array to be: [dispatch, userInput]",{"range":"161","text":"162"},"Update the dependencies array to be: [formData]",{"range":"163","text":"164"},"Update the dependencies array to be: []",{"range":"165","text":"166"},"Update the dependencies array to be: [dispatch, formData]",{"range":"167","text":"168"},"Update the dependencies array to be: [history, isLogin]",{"range":"169","text":"170"},[514,516],"[inputData.pwCheck]",[952,954],"[dispatch]",[1355,1376],"[dispatch, inputReply, isLogin, userNickname]",[546,548],[892,903],"[dispatch, userInput]",[675,677],"[formData]",[779,799],"[]",[899,901],"[dispatch, formData]",[1020,1022],"[history, isLogin]"]