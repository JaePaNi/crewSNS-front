[{"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\index.js":"1","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\App.js":"2","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\configure.js":"3","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\main.js":"4","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\signUp.js":"5","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\index.js":"6","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\thunk\\thunkUser.js":"7","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postAdd.js":"8","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storeUser.js":"9","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\login.js":"10","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storePost.js":"11","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\notLogin.js":"12","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postList.js":"13","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\thunk\\thunkPost.js":"14","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\desc.js":"15","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\coverImage.js":"16"},{"size":616,"mtime":1611288010017,"results":"17","hashOfConfig":"18"},{"size":1293,"mtime":1611556936283,"results":"19","hashOfConfig":"18"},{"size":181,"mtime":1611557200948,"results":"20","hashOfConfig":"18"},{"size":1178,"mtime":1611623357194,"results":"21","hashOfConfig":"18"},{"size":4247,"mtime":1611532976107,"results":"22","hashOfConfig":"18"},{"size":223,"mtime":1611532976109,"results":"23","hashOfConfig":"18"},{"size":1203,"mtime":1611706921018,"results":"24","hashOfConfig":"18"},{"size":3937,"mtime":1611706921016,"results":"25","hashOfConfig":"18"},{"size":2623,"mtime":1611532976114,"results":"26","hashOfConfig":"18"},{"size":1426,"mtime":1611532976094,"results":"27","hashOfConfig":"18"},{"size":2739,"mtime":1611648022037,"results":"28","hashOfConfig":"18"},{"size":2542,"mtime":1611532976098,"results":"29","hashOfConfig":"18"},{"size":2406,"mtime":1611708304666,"results":"30","hashOfConfig":"18"},{"size":1139,"mtime":1611706921017,"results":"31","hashOfConfig":"18"},{"size":2295,"mtime":1611707755696,"results":"32","hashOfConfig":"18"},{"size":708,"mtime":1611707631150,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"2v2suu",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"37"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"37"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"37"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\index.js",["77"],"import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/configure';\r\n\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  body {\r\n    background-color: #fff3e0;\r\n  }\r\n`\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    <GlobalStyle />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);",["78","79"],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\App.js",["80"],"import React, { useEffect } from 'react';\r\nimport { Row, Col, Typography } from 'antd';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchLoadUser } from './store/thunk/thunkUser';\r\nimport styled from 'styled-components';\r\n\r\nimport Main from './component/main';\r\nimport SignUp from './component/signUp';\r\nimport AddPost from './component/postAdd';\r\n\r\nfunction App() {\r\n    const { isLogin } = useSelector(state => state.storeUser);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        !isLogin && dispatch(fetchLoadUser());\r\n    }, []);\r\n    \r\n    return (\r\n        <Row>\r\n            <ColHeader span={24}>\r\n                <Typography.Title level={3}>CREW STAGRAM</Typography.Title>\r\n            </ColHeader>\r\n            <Col span={24}>\r\n                <BrowserRouter>\r\n                    <Route exact path='/'><Main /></Route>\r\n                    <Route exact path='/signup'><SignUp /></Route>\r\n                    <Route exact path='/addpost'><AddPost /></Route>\r\n                </BrowserRouter>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\nconst ColHeader = styled(Col)`\r\n  padding: 15px 0;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n  color: black;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\configure.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\main.js",["81","82","83"],"import React, { Suspense, useEffect } from 'react';\r\n\r\nimport { Row, Col } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchPost } from '../store/thunk/thunkPost';\r\n\r\nimport Login from './login';\r\nimport NotLogin from './notLogin';\r\nconst PostList = React.lazy(() => import('./postList'));\r\n\r\nconst Main = () => {\r\n\r\n    // 로그인 여부를 확인한다. true or false\r\n    const { isLogin } = useSelector(state => state.storeUser);\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={2} />\r\n            <Col md={22} xs={22}>\r\n                <Row justify='space-around'>\r\n                    {/* isLogin이 true, false에 따라서 로그인 창 or 유저창이 보여진다. */}\r\n                    <Col md={6} xs={24}>{isLogin === true ? <Login /> : <NotLogin />}</Col>\r\n                    <Col md={1} />\r\n                    <Col md={17} xs={24}>\r\n                        <Suspense fallback={<div>loading...</div>}>\r\n                            <PostList />\r\n                        </Suspense>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Main;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\signUp.js",["84","85"],"import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { Form, Input, Button, Row, Col } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { registReset } from '../store/storeUser';\r\nimport { fetchRegist } from '../store/thunk/thunkUser';\r\n\r\nconst SignUp = () => {\r\n    const [inputData, setInputData] = useState({ pw: null, pwCheck: false });\r\n    const onloadFocus = useRef();\r\n    const dispatch = useDispatch();\r\n    const { loading, regist, error } = useSelector(state => state.storeUser);\r\n    const history = useHistory();\r\n\r\n    //사용할 아이디 비밀번호 전부 입력 후 회원가입 버튼 누르면 createAsyncThunk를 통해 백엔드에 회원가입 요청을 보낸다.\r\n    //inputData.pwCheck :: 사용자가 입력한 두개의 비밀번호가 일치한지 확인한다.\r\n    const onInputSuccess = useCallback(e => {\r\n        if (inputData.pwCheck) dispatch(fetchRegist(e));\r\n    }, [inputData]);\r\n\r\n    //비밀번호를 서로 비교사기 위해서 useState inputData에 저장한다.\r\n    const insertPassword = useCallback(e => {\r\n        setInputData({ ...inputData, pw: e.target.value })\r\n    }, [inputData]);\r\n\r\n    //사용자가 입력한 비밀번호와 비밀번호 확인이 서로 같은지 확인한다.\r\n    const passwordCheck = useCallback(e => {\r\n        inputData.pw === e.target.value\r\n            ? setInputData({ ...inputData, pwCheck: true })\r\n            : setInputData({ ...inputData, pwCheck: false })\r\n    }, [inputData]);\r\n\r\n    //회원가입 버튼을 누르고 백엔드에서 응답이 오면 성공/실패 여부를 판단한다.\r\n    //useSelect로 regist, loading, error를 가지고 판단한다.\r\n    //loading과 regist모두 true이면 회원가입 성공, loading이 false이고 error가 true이면 회원가입 실패이다.\r\n    //회원가입은 아이디로만 중복확인한다.\r\n    useEffect(() => {\r\n        if (loading) {\r\n            if (regist) {\r\n                alert('회원가입 성공');\r\n                dispatch(registReset()); //회원가입 성공 후 storeUser의 regist값을 true에서 false로 변경해준다.\r\n                history.push('/');\r\n            }\r\n        }\r\n        if (loading === false && error) alert('중복되는 아이디 입니다.');\r\n    }, [regist, loading, error]);\r\n\r\n    //화면이 로딩되면 사용할 아이디 부분에 focus효과\r\n    useEffect(() => onloadFocus.current.focus(), []);\r\n\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={6} xs={22}>\r\n                <Form size='middle' onFinish={onInputSuccess} wrapperCol={{ md: 24, xs: 12 }}>\r\n                    <Form.Item name=\"id\" rules={[\r\n                        {\r\n                            required: true,\r\n                            message: '사용할 계정 입력해주세요'\r\n                        }\r\n                    ]}>\r\n                        <Input placeholder=\"사용할 아이디\" ref={onloadFocus} />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"pw\" rules={[\r\n                        {\r\n                            required: true,\r\n                            message: '사용할 비밀번호 입력해주세요'\r\n                        }\r\n                    ]}>\r\n                        <Input.Password placeholder=\"사용할 비밀번호\" onChange={insertPassword} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"pwCheck\">\r\n                        <Input.Password placeholder=\"비밀번호 확인\" onChange={passwordCheck} />\r\n                        {inputData.pwCheck === false ? <PwCheck>비밀번호가 다릅니다.</PwCheck> : undefined}\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <LoginButton type=\"primary\" htmlType=\"submit\" loading={loading && true} block>회원가입</LoginButton>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default SignUp;\r\n\r\n\r\nconst LoginButton = styled(Button)`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst PwCheck = styled.div`\r\n  font-weight: bold;\r\n  color: red;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\index.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\thunk\\thunkUser.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postAdd.js",["86","87","88","89","90","91","92","93"],"import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Row, Col, Form, Input, Button, Typography, Upload } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchImages, fetchCreatePost } from '../store/thunk/thunkPost';\r\nimport { removeImage, postStatus, resetPost } from '../store/storePost';\r\n\r\nconst PostAdd = () => {\r\n    const clickImage = useRef();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { isLogin, userId } = useSelector(state => state.storeUser);\r\n    const { images, createPost } = useSelector(state => state.storePost);\r\n\r\n    const onChangeImage = useCallback(e => {\r\n        const formData = new FormData();\r\n        for (let i = 0; i < e.target.files.length; i++) {\r\n            formData.append('image', e.target.files[i], e.target.files[i].name);\r\n        }\r\n        dispatch(fetchImages(formData));\r\n    }, []);\r\n\r\n    const onClickImageUpload = useCallback(() => {\r\n        clickImage.current.click();\r\n    }, [clickImage.current]);\r\n\r\n    const onFinish = useCallback(e => {\r\n        const formData = new FormData();\r\n        for (let i = 0; i < images.length; i++) {\r\n            console.log('image value :: ', images[i]);\r\n            formData.append('images', images[i]);\r\n        }\r\n        formData.append('title', e.title);\r\n        formData.append('content', e.content);\r\n        formData.append('user', userId);\r\n        dispatch(fetchCreatePost(formData));\r\n    }, [images]);\r\n\r\n    const onClickRemoveImage = useCallback(index => () => {\r\n        dispatch(removeImage(index));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (createPost) {\r\n            dispatch(postStatus());\r\n            dispatch(resetPost());\r\n            alert('포스트가 등록되었습니다.');\r\n            history.push('/');\r\n        }\r\n    }, [createPost]);\r\n\r\n    useEffect(() => {\r\n        !isLogin && history.push('/');\r\n    }, []);\r\n\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={22} xs={22} style={{ textAlign: 'center', margin: '50px 0', fontSize: 20 }}>\r\n                <Typography.Title level={3}>포스트 작성</Typography.Title>\r\n            </Col>\r\n            <Col md={10} xs={22}>\r\n                <Form onFinish={onFinish} encType='multipart/form-data'>\r\n                    <Form.Item name='title'>\r\n                        <Input placeholder=\"포스트의 제목은 무엇인가요?\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name='content'>\r\n                        <Input.TextArea placeholder=\"어떤 내용을 작성하시겠어요?\" autoSize={{ minRows: 7 }} />\r\n                    </Form.Item>\r\n\r\n                    <input ref={clickImage} type='file' multiple hidden onChange={onChangeImage} encType='multipart/form-data' />\r\n                    <Button block onClick={onClickImageUpload} icon={<UploadOutlined />}>이미지를 업로드 하시겠어요?</Button>\r\n\r\n                    <Form.Item>\r\n                        <div style={{ display: 'flex' }}>\r\n                            {images.length !== 0 && images.map((e, index) => (\r\n                                <div>\r\n                                    <img src={e} width='100px' height='auto' />\r\n                                    <div>\r\n                                        <Button onClick={onClickRemoveImage(index)}>지우기</Button>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button block type=\"primary\" htmlType=\"submit\">포스트 업로드</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default PostAdd;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storeUser.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\login.js",["94"],"import { memo, useCallback } from 'react';\r\nimport { Card, Typography, Row, Col, Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchLogout } from '../store/thunk/thunkUser';\r\nimport styled from 'styled-components';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n    const { userNickname, userId } = useSelector(state => state.storeUser);\r\n    const onClickLogout = useCallback(() => {\r\n        dispatch(fetchLogout());\r\n    }, []);\r\n\r\n    return (\r\n        <Wrap>\r\n            <Card size=\"small\" hoverable>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'center' }}>\r\n                        <Title level={4}>{userNickname === '#' ? userId : userNickname}님</Title></Col>\r\n                    <ColButton span={24}>\r\n                        <Link to='/addpost'>\r\n                            <Button type='ghost' block>포스트 작성</Button>\r\n                        </Link>\r\n                    </ColButton>\r\n                    <ColButton span={24}><Button danger block onClick={onClickLogout}>로그아웃</Button></ColButton>\r\n                </Row>\r\n            </Card>\r\n        </Wrap>\r\n    );\r\n}\r\n\r\nexport default memo(Login);\r\n\r\nconst Wrap = styled.div`\r\n  position: sticky;\r\n  top: 15px;\r\n`;\r\n\r\nconst ColButton = styled(Col)`\r\n    margin: 5px 0;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storePost.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\notLogin.js",["95"],"import React, { useEffect, useCallback, useRef, memo } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchLogin } from '../store/thunk/thunkUser';\r\n\r\nconst LoginForm = () => {\r\n    const onloadFocus = useRef();\r\n\r\n    const dispatch = useDispatch();\r\n    const { loading, error } = useSelector(state => state.storeUser);\r\n\r\n    // 사용자가 로그인을 위한 id, pw를 입력 후 로그인 버튼을 누르면 fetchLogin을 dispatch하여 백엔드로 로그인을 위한 데이터를 보낸다.\r\n    const onInputSuccess = useCallback(e => {\r\n        dispatch(fetchLogin({ ...e }));\r\n    }, []);\r\n\r\n    // 입력한 id, pw로 로그인에 성공하지 못했으면 id, pw중 한가지가 오류가 난 것이므로 error가 true가 된다. 그러면 alert이벤트를 발생시킨다.\r\n    useEffect(() => {\r\n        error && alert('아이디 또는 비밀번호가 틀렸습니다.');\r\n    }, [error]);\r\n\r\n    //화면이 로딩되면 로그인 아이디에 자동 포커싱\r\n    useEffect(() => {\r\n        onloadFocus.current.focus();\r\n    }, []);\r\n\r\n    return (\r\n        <Wrap>\r\n            <Form size='middle' onFinish={onInputSuccess} wrapperCol={{ md: 18, xs: 12 }}>\r\n                <Form.Item name=\"id\" rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '계정 입력'\r\n                    }\r\n                ]}>\r\n                    <Input placeholder=\"아이디\" ref={onloadFocus} />\r\n                </Form.Item>\r\n                <Form.Item name=\"pw\" rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '비밀번호 입력'\r\n                    }\r\n                ]}>\r\n                    <Input type=\"password\" placeholder=\"비밀번호\" />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {/* loading이 true이면 loading 애니메이션이 동작한다. */}\r\n                    <LoginButton type=\"primary\" htmlType=\"submit\" loading={loading && true}>로그인</LoginButton>\r\n                    <Button type=\"ghost\"><Link to='/signup'>회원가입</Link></Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Wrap>\r\n    );\r\n}\r\n\r\nexport default memo(LoginForm);\r\n\r\n\r\nconst LoginButton = styled(Button)`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Wrap = styled.div`\r\n  position: sticky;\r\n  top: 15px;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postList.js",["96","97"],"import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Card, Typography } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchPost } from '../store/thunk/thunkPost';\r\nimport CoverImage from './coverImage'\r\nimport Desc from './desc';\r\n\r\nconst { Meta } = Card;\r\nconst { Title } = Typography;\r\n\r\nconst Post = () => {\r\n    const dispatch = useDispatch();\r\n    const { Post, callPost } = useSelector(state => state.storePost);\r\n    const [skip, setSkip] = useState(0);\r\n\r\n    const onscroll = () => {\r\n        const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\r\n        if ((scrollTop + clientHeight) > scrollHeight - 5) {\r\n            console.log(`scrollTop :: ${scrollTop} scrollHeight :: ${scrollHeight} clientHeight :: ${clientHeight}`);\r\n            setSkip(skip + 4);\r\n            dispatch(fetchPost(skip));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', onscroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onscroll);\r\n        }\r\n    }, [onscroll]);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPost(skip));\r\n        setSkip(skip + 4);\r\n    }, []);\r\n\r\n    return (\r\n        callPost &&\r\n        <Row>\r\n            <Col md={10} xs={24}>\r\n                {\r\n                    Post.map((e, index) => (\r\n                        <Cards\r\n                            key={index}\r\n                            hoverable\r\n                            style={{ maxWidth: '100%' }}\r\n                            title={\r\n                                <Row align=\"center\">\r\n                                    {/* <Col md={3} xs={4}><Avatar icon={<UserOutlined />} /></Col> */}\r\n                                    <Col md={21} xs={20}>{e.post_author}</Col>\r\n                                </Row>\r\n                            }\r\n                            cover={<CoverImage key={index} post={e} />}\r\n                        >\r\n                            <Meta\r\n                                title={<Title level={4}>{e.post_title}</Title>}\r\n                                description={<Desc post={e} />}\r\n                            />\r\n                        </Cards>\r\n                    ))}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n\r\nconst Cards = styled(Card)`\r\n  margin: 30px 0;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\thunk\\thunkPost.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\desc.js",["98"],"import React, { useState, useCallback   } from 'react';\r\nimport { Row, Col, Comment, Tooltip, Typography, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { fetchReply } from '../store/thunk/thunkPost';\r\n\r\nconst { Paragraph } = Typography;\r\nconst paragraphData = { rows: 3, expandable: true, symbol: <span>more</span> }\r\n\r\nconst Desc = ({ post }) => {\r\n    const { PostReply } = useSelector(state => state.storePost);\r\n    const { isLogin, userId } = useSelector(state => state.storeUser);\r\n    const dispatch = useDispatch();\r\n\r\n    const [replyContent, setReplyContent] = useState('');\r\n    \r\n    const onChangeReply = useCallback(e => {\r\n        setReplyContent(e.target.value);\r\n    }, []);\r\n\r\n    const onClickReply = useCallback(index => () => {\r\n        replyContent !== '' && dispatch(fetchReply({ replyContent, userId, index }));\r\n        setReplyContent('');\r\n    }, [replyContent, isLogin]);\r\n    return (\r\n        <Row>\r\n            <Col span={24}>\r\n                <Paragraph\r\n                    ellipsis={paragraphData}>\r\n                    {post.post_content}\r\n                </Paragraph>\r\n            </Col>\r\n            {/*댓글*/}\r\n            {\r\n                PostReply.map((reply, index) => (\r\n                    reply.reply_post_author === post.post_id &&\r\n                    <Col span={24} key={index}>\r\n                        <Comment\r\n                            author={<span>{reply.reply_user_author}</span>}\r\n                            content={<p>{reply.reply_content}</p>}\r\n                            datetime={<Tooltip title={reply.reply_createdate}><span>{reply.reply_createdate}</span></Tooltip>}\r\n                        />\r\n                    </Col>\r\n                ))\r\n            }{\r\n                isLogin &&\r\n                <React.Fragment>\r\n                    <Col md={20} xs={18}>\r\n                        <Input onChange={onChangeReply} value={replyContent} placeholder=\"댓글...\" bordered={false} onPressEnter={onClickReply(post.post_id)} />\r\n                    </Col>\r\n                    <Col md={4} xs={6}><Button onClick={onClickReply(post.post_id)} type=\"text\">게시</Button></Col>\r\n                </React.Fragment>\r\n            }\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Desc;",["99","100"],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\coverImage.js",[],{"ruleId":"101","severity":1,"message":"102","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":26},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":18,"column":8,"nodeType":"111","endLine":18,"endColumn":10,"suggestions":"112"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":27,"nodeType":"103","messageId":"104","endLine":1,"endColumn":36},{"ruleId":"101","severity":1,"message":"113","line":4,"column":23,"nodeType":"103","messageId":"104","endLine":4,"endColumn":34},{"ruleId":"101","severity":1,"message":"114","line":5,"column":10,"nodeType":"103","messageId":"104","endLine":5,"endColumn":19},{"ruleId":"109","severity":1,"message":"115","line":20,"column":8,"nodeType":"111","endLine":20,"endColumn":19,"suggestions":"116"},{"ruleId":"109","severity":1,"message":"117","line":47,"column":8,"nodeType":"111","endLine":47,"endColumn":32,"suggestions":"118"},{"ruleId":"101","severity":1,"message":"119","line":3,"column":53,"nodeType":"103","messageId":"104","endLine":3,"endColumn":59},{"ruleId":"109","severity":1,"message":"115","line":22,"column":8,"nodeType":"111","endLine":22,"endColumn":10,"suggestions":"120"},{"ruleId":"109","severity":1,"message":"121","line":26,"column":8,"nodeType":"111","endLine":26,"endColumn":28,"suggestions":"122"},{"ruleId":"109","severity":1,"message":"123","line":38,"column":8,"nodeType":"111","endLine":38,"endColumn":16,"suggestions":"124"},{"ruleId":"109","severity":1,"message":"115","line":42,"column":8,"nodeType":"111","endLine":42,"endColumn":10,"suggestions":"125"},{"ruleId":"109","severity":1,"message":"117","line":51,"column":8,"nodeType":"111","endLine":51,"endColumn":20,"suggestions":"126"},{"ruleId":"109","severity":1,"message":"127","line":55,"column":8,"nodeType":"111","endLine":55,"endColumn":10,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":79,"column":37,"nodeType":"131","endLine":79,"endColumn":80},{"ruleId":"109","severity":1,"message":"115","line":15,"column":8,"nodeType":"111","endLine":15,"endColumn":10,"suggestions":"132"},{"ruleId":"109","severity":1,"message":"115","line":17,"column":8,"nodeType":"111","endLine":17,"endColumn":10,"suggestions":"133"},{"ruleId":"109","severity":1,"message":"134","line":17,"column":11,"nodeType":"135","endLine":24,"endColumn":6},{"ruleId":"109","severity":1,"message":"136","line":36,"column":8,"nodeType":"111","endLine":36,"endColumn":10,"suggestions":"137"},{"ruleId":"109","severity":1,"message":"123","line":24,"column":8,"nodeType":"111","endLine":24,"endColumn":31,"suggestions":"138"},{"ruleId":"105","replacedBy":"139"},{"ruleId":"107","replacedBy":"140"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["141"],"no-negated-in-lhs",["142"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'isLogin'. Either include them or remove the dependency array.","ArrayExpression",["143"],"'useDispatch' is defined but never used.","'fetchPost' is defined but never used.","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["144"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["145"],"'Upload' is defined but never used.",["146"],"React Hook useCallback has an unnecessary dependency: 'clickImage.current'. Either exclude it or remove the dependency array. Mutable values like 'clickImage.current' aren't valid dependencies because mutating them doesn't re-render the component.",["147"],"React Hook useCallback has missing dependencies: 'dispatch' and 'userId'. Either include them or remove the dependency array.",["148"],["149"],["150"],"React Hook useEffect has missing dependencies: 'history' and 'isLogin'. Either include them or remove the dependency array.",["151"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["152"],["153"],"The 'onscroll' function makes the dependencies of useEffect Hook (at line 31) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'onscroll' in its own useCallback() Hook.","VariableDeclarator","React Hook useEffect has missing dependencies: 'dispatch' and 'skip'. Either include them or remove the dependency array. You can also do a functional update 'setSkip(s => ...)' if you only need 'skip' in the 'setSkip' call.",["154"],["155"],["141"],["142"],"no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"162","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"162","fix":"173"},{"desc":"162","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [dispatch, isLogin]",{"range":"179","text":"180"},"Update the dependencies array to be: [dispatch, inputData.pwCheck]",{"range":"181","text":"182"},"Update the dependencies array to be: [regist, loading, error, dispatch, history]",{"range":"183","text":"184"},"Update the dependencies array to be: [dispatch]",{"range":"185","text":"186"},"Update the dependencies array to be: []",{"range":"187","text":"188"},"Update the dependencies array to be: [dispatch, images, userId]",{"range":"189","text":"190"},{"range":"191","text":"186"},"Update the dependencies array to be: [createPost, dispatch, history]",{"range":"192","text":"193"},"Update the dependencies array to be: [history, isLogin]",{"range":"194","text":"195"},{"range":"196","text":"186"},{"range":"197","text":"186"},"Update the dependencies array to be: [dispatch, skip]",{"range":"198","text":"199"},"Update the dependencies array to be: [replyContent, dispatch, userId]",{"range":"200","text":"201"},[630,632],"[dispatch, isLogin]",[926,937],"[dispatch, inputData.pwCheck]",[1952,1976],"[regist, loading, error, dispatch, history]",[1016,1018],"[dispatch]",[1120,1140],"[]",[1585,1593],"[dispatch, images, userId]",[1706,1708],[1924,1936],"[createPost, dispatch, history]",[2012,2014],"[history, isLogin]",[561,563],[674,676],[1236,1238],"[dispatch, skip]",[924,947],"[replyContent, dispatch, userId]"]