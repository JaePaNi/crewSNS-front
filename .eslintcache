[{"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\index.js":"1","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\configure.js":"2","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\App.js":"3","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\index.js":"4","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\thunk\\thunkUser.js":"5","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\signUp.js":"6","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\main.js":"7","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postAdd.js":"8","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storeUser.js":"9","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storePost.js":"10","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\notLogin.js":"11","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\login.js":"12","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postList.js":"13","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\thunk\\thunkPost.js":"14"},{"size":616,"mtime":1611288010017,"results":"15","hashOfConfig":"16"},{"size":245,"mtime":1611107861988,"results":"17","hashOfConfig":"16"},{"size":1287,"mtime":1611532976091,"results":"18","hashOfConfig":"16"},{"size":223,"mtime":1611532976109,"results":"19","hashOfConfig":"16"},{"size":1195,"mtime":1611532976118,"results":"20","hashOfConfig":"16"},{"size":4247,"mtime":1611532976107,"results":"21","hashOfConfig":"16"},{"size":1106,"mtime":1611532976097,"results":"22","hashOfConfig":"16"},{"size":3867,"mtime":1611546538804,"results":"23","hashOfConfig":"16"},{"size":2623,"mtime":1611532976114,"results":"24","hashOfConfig":"16"},{"size":2753,"mtime":1611546946905,"results":"25","hashOfConfig":"16"},{"size":2542,"mtime":1611532976098,"results":"26","hashOfConfig":"16"},{"size":1426,"mtime":1611532976094,"results":"27","hashOfConfig":"16"},{"size":5390,"mtime":1611546872099,"results":"28","hashOfConfig":"16"},{"size":1106,"mtime":1611532976116,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"2v2suu",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"33"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"33"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"33"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\index.js",["65"],"import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/configure';\r\n\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  body {\r\n    background-color: #fff3e0;\r\n  }\r\n`\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    <GlobalStyle />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);",["66","67"],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\configure.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\App.js",["68"],"import React, { useEffect } from 'react';\r\nimport { Row, Col, Typography } from 'antd';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchLoadUser } from './store/thunk/thunkUser';\r\nimport styled from 'styled-components';\r\n\r\nimport Main from './component/main';\r\nimport SignUp from './component/signUp';\r\nimport AddPost from './component/postAdd';\r\n\r\nfunction App() {\r\n    const { isLogin } = useSelector(state => state.storeUser);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        !isLogin && dispatch(fetchLoadUser());\r\n    }, []);\r\n    return (\r\n        <Row>\r\n            <ColHeader span={24}>\r\n                <Typography.Title level={3}>CREW STAGRAM</Typography.Title>\r\n            </ColHeader>\r\n            <Col span={24}>\r\n                <BrowserRouter>\r\n                    <Route exact path='/'><Main /></Route>\r\n                    <Route exact path='/signup'><SignUp /></Route>\r\n                    <Route exact path='/addpost'><AddPost /></Route>\r\n                </BrowserRouter>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\nconst ColHeader = styled(Col)`\r\n  padding: 15px 0;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n  color: black;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\index.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\thunk\\thunkUser.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\signUp.js",["69","70"],"import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { Form, Input, Button, Row, Col } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { registReset } from '../store/storeUser';\r\nimport { fetchRegist } from '../store/thunk/thunkUser';\r\n\r\nconst SignUp = () => {\r\n    const [inputData, setInputData] = useState({ pw: null, pwCheck: false });\r\n    const onloadFocus = useRef();\r\n    const dispatch = useDispatch();\r\n    const { loading, regist, error } = useSelector(state => state.storeUser);\r\n    const history = useHistory();\r\n\r\n    //사용할 아이디 비밀번호 전부 입력 후 회원가입 버튼 누르면 createAsyncThunk를 통해 백엔드에 회원가입 요청을 보낸다.\r\n    //inputData.pwCheck :: 사용자가 입력한 두개의 비밀번호가 일치한지 확인한다.\r\n    const onInputSuccess = useCallback(e => {\r\n        if (inputData.pwCheck) dispatch(fetchRegist(e));\r\n    }, [inputData]);\r\n\r\n    //비밀번호를 서로 비교사기 위해서 useState inputData에 저장한다.\r\n    const insertPassword = useCallback(e => {\r\n        setInputData({ ...inputData, pw: e.target.value })\r\n    }, [inputData]);\r\n\r\n    //사용자가 입력한 비밀번호와 비밀번호 확인이 서로 같은지 확인한다.\r\n    const passwordCheck = useCallback(e => {\r\n        inputData.pw === e.target.value\r\n            ? setInputData({ ...inputData, pwCheck: true })\r\n            : setInputData({ ...inputData, pwCheck: false })\r\n    }, [inputData]);\r\n\r\n    //회원가입 버튼을 누르고 백엔드에서 응답이 오면 성공/실패 여부를 판단한다.\r\n    //useSelect로 regist, loading, error를 가지고 판단한다.\r\n    //loading과 regist모두 true이면 회원가입 성공, loading이 false이고 error가 true이면 회원가입 실패이다.\r\n    //회원가입은 아이디로만 중복확인한다.\r\n    useEffect(() => {\r\n        if (loading) {\r\n            if (regist) {\r\n                alert('회원가입 성공');\r\n                dispatch(registReset()); //회원가입 성공 후 storeUser의 regist값을 true에서 false로 변경해준다.\r\n                history.push('/');\r\n            }\r\n        }\r\n        if (loading === false && error) alert('중복되는 아이디 입니다.');\r\n    }, [regist, loading, error]);\r\n\r\n    //화면이 로딩되면 사용할 아이디 부분에 focus효과\r\n    useEffect(() => onloadFocus.current.focus(), []);\r\n\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={6} xs={22}>\r\n                <Form size='middle' onFinish={onInputSuccess} wrapperCol={{ md: 24, xs: 12 }}>\r\n                    <Form.Item name=\"id\" rules={[\r\n                        {\r\n                            required: true,\r\n                            message: '사용할 계정 입력해주세요'\r\n                        }\r\n                    ]}>\r\n                        <Input placeholder=\"사용할 아이디\" ref={onloadFocus} />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"pw\" rules={[\r\n                        {\r\n                            required: true,\r\n                            message: '사용할 비밀번호 입력해주세요'\r\n                        }\r\n                    ]}>\r\n                        <Input.Password placeholder=\"사용할 비밀번호\" onChange={insertPassword} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"pwCheck\">\r\n                        <Input.Password placeholder=\"비밀번호 확인\" onChange={passwordCheck} />\r\n                        {inputData.pwCheck === false ? <PwCheck>비밀번호가 다릅니다.</PwCheck> : undefined}\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <LoginButton type=\"primary\" htmlType=\"submit\" loading={loading && true} block>회원가입</LoginButton>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default SignUp;\r\n\r\n\r\nconst LoginButton = styled(Button)`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst PwCheck = styled.div`\r\n  font-weight: bold;\r\n  color: red;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\main.js",["71"],"import React, { Suspense, useMemo } from 'react';\r\n\r\nimport { Row, Col } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Login from './login';\r\nimport NotLogin from './notLogin';\r\nconst PostList = React.lazy(() => import('./postList'));\r\n\r\nconst Main = () => {\r\n    // 로그인 여부를 확인한다. true or false\r\n    const { isLogin } = useSelector(state => state.storeUser);\r\n    return (\r\n        <Row justify='center'>\r\n            <Col md={2} />\r\n            <Col md={22} xs={22}>\r\n                <Row justify='space-around'>\r\n                    {/* isLogin이 true, false에 따라서 로그인 창 or 유저창이 보여진다. */}\r\n                    <Col md={6} xs={24}>{isLogin === true ? <Login /> : <NotLogin />}</Col>\r\n                    <Col md={1} />\r\n                    <Col md={17} xs={24}>\r\n                        <Suspense fallback={<div>loading...</div>}>\r\n                            <PostList />\r\n                        </Suspense>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Main;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postAdd.js",["72","73","74","75","76","77","78","79"],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storeUser.js",[],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\storePost.js",["80"],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\notLogin.js",["81"],"import React, { useEffect, useCallback, useRef, memo } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchLogin } from '../store/thunk/thunkUser';\r\n\r\nconst LoginForm = () => {\r\n    const onloadFocus = useRef();\r\n\r\n    const dispatch = useDispatch();\r\n    const { loading, error } = useSelector(state => state.storeUser);\r\n\r\n    // 사용자가 로그인을 위한 id, pw를 입력 후 로그인 버튼을 누르면 fetchLogin을 dispatch하여 백엔드로 로그인을 위한 데이터를 보낸다.\r\n    const onInputSuccess = useCallback(e => {\r\n        dispatch(fetchLogin({ ...e }));\r\n    }, []);\r\n\r\n    // 입력한 id, pw로 로그인에 성공하지 못했으면 id, pw중 한가지가 오류가 난 것이므로 error가 true가 된다. 그러면 alert이벤트를 발생시킨다.\r\n    useEffect(() => {\r\n        error && alert('아이디 또는 비밀번호가 틀렸습니다.');\r\n    }, [error]);\r\n\r\n    //화면이 로딩되면 로그인 아이디에 자동 포커싱\r\n    useEffect(() => {\r\n        onloadFocus.current.focus();\r\n    }, []);\r\n\r\n    return (\r\n        <Wrap>\r\n            <Form size='middle' onFinish={onInputSuccess} wrapperCol={{ md: 18, xs: 12 }}>\r\n                <Form.Item name=\"id\" rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '계정 입력'\r\n                    }\r\n                ]}>\r\n                    <Input placeholder=\"아이디\" ref={onloadFocus} />\r\n                </Form.Item>\r\n                <Form.Item name=\"pw\" rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '비밀번호 입력'\r\n                    }\r\n                ]}>\r\n                    <Input type=\"password\" placeholder=\"비밀번호\" />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {/* loading이 true이면 loading 애니메이션이 동작한다. */}\r\n                    <LoginButton type=\"primary\" htmlType=\"submit\" loading={loading && true}>로그인</LoginButton>\r\n                    <Button type=\"ghost\"><Link to='/signup'>회원가입</Link></Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Wrap>\r\n    );\r\n}\r\n\r\nexport default memo(LoginForm);\r\n\r\n\r\nconst LoginButton = styled(Button)`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Wrap = styled.div`\r\n  position: sticky;\r\n  top: 15px;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\login.js",["82"],"import { memo, useCallback } from 'react';\r\nimport { Card, Typography, Row, Col, Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchLogout } from '../store/thunk/thunkUser';\r\nimport styled from 'styled-components';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n    const { userNickname, userId } = useSelector(state => state.storeUser);\r\n    const onClickLogout = useCallback(() => {\r\n        dispatch(fetchLogout());\r\n    }, []);\r\n\r\n    return (\r\n        <Wrap>\r\n            <Card size=\"small\" hoverable>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'center' }}>\r\n                        <Title level={4}>{userNickname === '#' ? userId : userNickname}님</Title></Col>\r\n                    <ColButton span={24}>\r\n                        <Link to='/addpost'>\r\n                            <Button type='ghost' block>포스트 작성</Button>\r\n                        </Link>\r\n                    </ColButton>\r\n                    <ColButton span={24}><Button danger block onClick={onClickLogout}>로그아웃</Button></ColButton>\r\n                </Row>\r\n            </Card>\r\n        </Wrap>\r\n    );\r\n}\r\n\r\nexport default memo(Login);\r\n\r\nconst Wrap = styled.div`\r\n  position: sticky;\r\n  top: 15px;\r\n`;\r\n\r\nconst ColButton = styled(Col)`\r\n    margin: 5px 0;\r\n`;","C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\component\\postList.js",["83","84","85","86","87"],"C:\\Users\\217-Pro\\Desktop\\jh\\crewSNS-front\\src\\store\\thunk\\thunkPost.js",[],{"ruleId":"88","severity":1,"message":"89","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":26},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":18,"column":8,"nodeType":"98","endLine":18,"endColumn":10,"suggestions":"99"},{"ruleId":"96","severity":1,"message":"100","line":20,"column":8,"nodeType":"98","endLine":20,"endColumn":19,"suggestions":"101"},{"ruleId":"96","severity":1,"message":"102","line":47,"column":8,"nodeType":"98","endLine":47,"endColumn":32,"suggestions":"103"},{"ruleId":"88","severity":1,"message":"104","line":1,"column":27,"nodeType":"90","messageId":"91","endLine":1,"endColumn":34},{"ruleId":"88","severity":1,"message":"105","line":3,"column":53,"nodeType":"90","messageId":"91","endLine":3,"endColumn":59},{"ruleId":"96","severity":1,"message":"100","line":22,"column":8,"nodeType":"98","endLine":22,"endColumn":10,"suggestions":"106"},{"ruleId":"96","severity":1,"message":"107","line":26,"column":8,"nodeType":"98","endLine":26,"endColumn":28,"suggestions":"108"},{"ruleId":"96","severity":1,"message":"109","line":37,"column":8,"nodeType":"98","endLine":37,"endColumn":16,"suggestions":"110"},{"ruleId":"96","severity":1,"message":"100","line":41,"column":8,"nodeType":"98","endLine":41,"endColumn":10,"suggestions":"111"},{"ruleId":"96","severity":1,"message":"102","line":49,"column":8,"nodeType":"98","endLine":49,"endColumn":20,"suggestions":"112"},{"ruleId":"96","severity":1,"message":"113","line":53,"column":8,"nodeType":"98","endLine":53,"endColumn":10,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":77,"column":37,"nodeType":"117","endLine":77,"endColumn":114},{"ruleId":"88","severity":1,"message":"118","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":13},{"ruleId":"96","severity":1,"message":"100","line":17,"column":8,"nodeType":"98","endLine":17,"endColumn":10,"suggestions":"119"},{"ruleId":"96","severity":1,"message":"100","line":15,"column":8,"nodeType":"98","endLine":15,"endColumn":10,"suggestions":"120"},{"ruleId":"88","severity":1,"message":"121","line":1,"column":51,"nodeType":"90","messageId":"91","endLine":1,"endColumn":57},{"ruleId":"88","severity":1,"message":"104","line":1,"column":59,"nodeType":"90","messageId":"91","endLine":1,"endColumn":66},{"ruleId":"88","severity":1,"message":"122","line":2,"column":78,"nodeType":"90","messageId":"91","endLine":2,"endColumn":84},{"ruleId":"96","severity":1,"message":"123","line":24,"column":8,"nodeType":"98","endLine":24,"endColumn":10,"suggestions":"124"},{"ruleId":"96","severity":1,"message":"109","line":35,"column":8,"nodeType":"98","endLine":35,"endColumn":31,"suggestions":"125"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["126"],"no-negated-in-lhs",["127"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'isLogin'. Either include them or remove the dependency array.","ArrayExpression",["128"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["129"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["130"],"'useMemo' is defined but never used.","'Upload' is defined but never used.",["131"],"React Hook useCallback has an unnecessary dependency: 'clickImage.current'. Either exclude it or remove the dependency array. Mutable values like 'clickImage.current' aren't valid dependencies because mutating them doesn't re-render the component.",["132"],"React Hook useCallback has missing dependencies: 'dispatch' and 'userId'. Either include them or remove the dependency array.",["133"],["134"],["135"],"React Hook useEffect has missing dependencies: 'history' and 'isLogin'. Either include them or remove the dependency array.",["136"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'axios' is defined but never used.",["137"],["138"],"'useRef' is defined but never used.","'Avatar' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["139"],["140"],"no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"147","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"147","fix":"158"},{"desc":"147","fix":"159"},{"desc":"147","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [dispatch, isLogin]",{"range":"163","text":"164"},"Update the dependencies array to be: [dispatch, inputData.pwCheck]",{"range":"165","text":"166"},"Update the dependencies array to be: [regist, loading, error, dispatch, history]",{"range":"167","text":"168"},"Update the dependencies array to be: [dispatch]",{"range":"169","text":"170"},"Update the dependencies array to be: []",{"range":"171","text":"172"},"Update the dependencies array to be: [dispatch, images, userId]",{"range":"173","text":"174"},{"range":"175","text":"170"},"Update the dependencies array to be: [createPost, dispatch, history]",{"range":"176","text":"177"},"Update the dependencies array to be: [history, isLogin]",{"range":"178","text":"179"},{"range":"180","text":"170"},{"range":"181","text":"170"},{"range":"182","text":"170"},"Update the dependencies array to be: [isLogin, replyContent, dispatch, userId]",{"range":"183","text":"184"},[630,632],"[dispatch, isLogin]",[926,937],"[dispatch, inputData.pwCheck]",[1952,1976],"[regist, loading, error, dispatch, history]",[1005,1007],"[dispatch]",[1109,1129],"[]",[1518,1526],"[dispatch, images, userId]",[1639,1641],[1820,1832],"[createPost, dispatch, history]",[1908,1910],"[history, isLogin]",[674,676],[561,563],[924,926],[1284,1307],"[isLogin, replyContent, dispatch, userId]"]